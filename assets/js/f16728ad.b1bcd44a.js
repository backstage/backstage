/*! For license information please see f16728ad.b1bcd44a.js.LICENSE.txt */
"use strict";(self.webpackChunkbackstage_microsite=self.webpackChunkbackstage_microsite||[]).push([[879144],{664525:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>p,default:()=>d,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var a=t(474848),o=t(28453);const s={id:"swappable-components",title:"Swappable components",sidebar_label:"Swappable components",description:"Configuring or overriding Swappable Components"},p="Swappable components",r={id:"frontend-system/building-plugins/swappable-components",title:"Swappable components",description:"Configuring or overriding Swappable Components",source:"@site/../docs/frontend-system/building-plugins/06-swappable-components.md",sourceDirName:"frontend-system/building-plugins",slug:"/frontend-system/building-plugins/swappable-components",permalink:"/docs/next/frontend-system/building-plugins/swappable-components",draft:!1,unlisted:!1,editUrl:"https://github.com/backstage/backstage/edit/master/docs/frontend-system/building-plugins/06-swappable-components.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{id:"swappable-components",title:"Swappable components",sidebar_label:"Swappable components",description:"Configuring or overriding Swappable Components"}},i={},l=[{value:"Creating a Swappable Component",id:"creating-a-swappable-component",level:2},{value:"Using a Swappable Component",id:"using-a-swappable-component",level:2},{value:"Overriding a Swappable Component",id:"overriding-a-swappable-component",level:2},{value:"Default Swappable Components",id:"default-swappable-components",level:2},{value:"Implementations in tests",id:"implementations-in-tests",level:2}];function c(e){const n={a:"a",code:"code",errordisplay:"errordisplay",h1:"h1",h2:"h2",header:"header",li:"li",notfounderrorpage:"notfounderrorpage",p:"p",pre:"pre",progress:"progress",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"swappable-components",children:"Swappable components"})}),"\n",(0,a.jsxs)(n.p,{children:["Swappable components are a feature of the frontend system that allow you to replace the implementations of components that are used in your Backstage app.\nThese Swappable Components are defined using ",(0,a.jsx)(n.code,{children:"createSwappableComponent"})," and then can be exported from a plugins ",(0,a.jsx)(n.code,{children:"-react"})," package in order to be used in both other plugins, and to be rebound to a new implementation by the Backstage Integrator."]}),"\n",(0,a.jsx)(n.h2,{id:"creating-a-swappable-component",children:"Creating a Swappable Component"}),"\n",(0,a.jsxs)(n.p,{children:["In order to create a Swappable Component, you need to use the ",(0,a.jsx)(n.code,{children:"createSwappableComponent"})," function from the ",(0,a.jsx)(n.code,{children:"@backstage/frontend-plugin-api"})," package. You can supply a default implementation for the component, as well as a way to separate both the props of the external component and in the implementation of the component."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",metastring:'title="in @internal/plugin-example-react"',children:"import { createSwappableComponent } from '@backstage/frontend-plugin-api';\n\nexport const ExampleSwappableComponent = createSwappableComponent({\n  name: 'example',\n\n  // This is a loader for loading the default implementation of the component when there's no overriden\n  // implementation created with `SwappableComponentBlueprint`.\n  // It can be sync like below, but is can also be async like `loader: () => import('./DefaultImplementation').then(m => m.DefaultImplementation)`.\n  loader: () => (props: { name: string }) =>\n    <div>Your name is {props.name}</div>,\n\n  // This is an optional function that can be used to transform the props of the external component.\n  // If it's not provided, the props of the external component will be passed through unchanged.\n  // Typically this wouldn't be used and you don't need to define this initially,\n  // this is a nice API to evolve the Swappable Component internal API without breaking usages of it in existing plugins.\n  transformProps: (props: { lastName: string; firstName: string }) => ({\n    name: `${props.firstName} ${props.lastName}`,\n  }),\n});\n"})}),"\n",(0,a.jsx)(n.h2,{id:"using-a-swappable-component",children:"Using a Swappable Component"}),"\n",(0,a.jsxs)(n.p,{children:["Using a Swappable Component is just like using any other React Component. The return of ",(0,a.jsx)(n.code,{children:"createSwappableComponent"})," can be rendered directly in your plugin, or any plugins that will be consuming your ",(0,a.jsx)(n.code,{children:"-react"})," package."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",metastring:'title="in @internal/plugin-example"',children:'import { ExampleSwappableComponent } from \'@internal/plugin-example-react\';\n\n<ExampleSwappableComponent firstName="John" lastName="Doe" />;\n'})}),"\n",(0,a.jsx)(n.h2,{id:"overriding-a-swappable-component",children:"Overriding a Swappable Component"}),"\n",(0,a.jsxs)(n.p,{children:["In order to override a Swappable Component, you need to create a ",(0,a.jsx)(n.code,{children:"SwappableComponentBlueprint"})," and install it with the ",(0,a.jsx)(n.code,{children:"app"})," plugin.\nThere are two different ways to add extensions to the ",(0,a.jsx)(n.code,{children:"app"})," plugin, both are documented below in an example of overriding the ",(0,a.jsx)(n.code,{children:"Progress"})," Swappable Component."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",metastring:'title="in packages/app/src/App.tsx"',children:"import {\n  Progress,\n  SwappableComponentBlueprint,\n  createFrontendModule,\n} from '@backstage/frontend-plugin-api';\nimport { MyCustomProgress } from './CustomProgress';\nimport { createApp } from '@backstage/frontend-defaults';\nimport appPlugin from '@backstage/plugin-app';\n\nconst app = createApp({\n  features: [\n    // Using a module to provide the extenion to the app\n    createFrontendModule({\n      pluginId: 'app',\n      extensions: [\n        SwappableComponentBlueprint.make({\n          name: 'core-progress',\n          params: defineParams =>\n            defineParams({\n              component: Progress,\n              loader: () => MyCustomProgress,\n            }),\n        }),\n      ],\n    }),\n    // Core components that already ship with the app plugin can be overriden using getExtension()\n    appPlugin.withOverrides({\n      extensions: [\n        appPlugin.getExtension('component:app/core-progress').override({\n          params: defineParams =>\n            defineParams({\n              component: Progress,\n              loader: () => MyCustomProgress,\n            }),\n        }),\n      ],\n    }),\n  ],\n});\n"})}),"\n",(0,a.jsx)(n.h2,{id:"default-swappable-components",children:"Default Swappable Components"}),"\n",(0,a.jsxs)(n.p,{children:["Currently there are only three different built-in Swappable Components that you can replace the implementations of, and these live in ",(0,a.jsx)(n.code,{children:"@backstage/frontend-plugin-api"}),". They are as follows:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["`",(0,a.jsx)(n.progress,{})]}),"\n",(0,a.jsxs)(n.li,{children:["`",(0,a.jsx)(n.errordisplay,{})]}),"\n",(0,a.jsxs)(n.li,{children:["`",(0,a.jsx)(n.notfounderrorpage,{})]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["You can see more about these components at their ",(0,a.jsx)(n.a,{href:"https://github.com/backstage/backstage/blob/master/packages/frontend-plugin-api/src/components/DefaultSwappableComponents.tsx",children:"definition"}),", and their default implementations are shipped inside the ",(0,a.jsx)(n.a,{href:"https://github.com/backstage/backstage/blob/master/plugins/app/src/extensions/components.tsx",children:(0,a.jsx)(n.code,{children:"app-plugin"})}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"implementations-in-tests",children:"Implementations in tests"}),"\n",(0,a.jsxs)(n.p,{children:["By default, if no ",(0,a.jsx)(n.code,{children:"loader"})," is passed through to ",(0,a.jsx)(n.code,{children:"createSwappableComponent"})," then there's a default fallback component which will be rendered, which is mainly helpful in tests. The default implementation for a Swappable Component without a ",(0,a.jsx)(n.code,{children:"loader"})," is as follows:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"props => <div data-testid={swappableComponentRef.id} {...props} />;\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Which means that you can use the ",(0,a.jsx)(n.code,{children:"getByTestId"})," in tests to assert that these components have been rendered on the page."]})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},221020:(e,n,t)=>{var a=t(296540),o=Symbol.for("react.element"),s=Symbol.for("react.fragment"),p=Object.prototype.hasOwnProperty,r=a.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,i={key:!0,ref:!0,__self:!0,__source:!0};function l(e,n,t){var a,s={},l=null,c=null;for(a in void 0!==t&&(l=""+t),void 0!==n.key&&(l=""+n.key),void 0!==n.ref&&(c=n.ref),n)p.call(n,a)&&!i.hasOwnProperty(a)&&(s[a]=n[a]);if(e&&e.defaultProps)for(a in n=e.defaultProps)void 0===s[a]&&(s[a]=n[a]);return{$$typeof:o,type:e,key:l,ref:c,props:s,_owner:r.current}}n.Fragment=s,n.jsx=l,n.jsxs=l},474848:(e,n,t)=>{e.exports=t(221020)},28453:(e,n,t)=>{t.d(n,{R:()=>p,x:()=>r});var a=t(296540);const o={},s=a.createContext(o);function p(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:p(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);