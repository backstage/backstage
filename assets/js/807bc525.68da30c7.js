/*! For license information please see 807bc525.68da30c7.js.LICENSE.txt */
"use strict";(self.webpackChunkbackstage_microsite=self.webpackChunkbackstage_microsite||[]).push([[143731],{664343:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>r});var t=a(474848),i=a(28453);const s={id:"commands",title:"Commands",description:"Descriptions of all commands available in the CLI."},c=void 0,o={id:"tooling/cli/commands",title:"Commands",description:"Descriptions of all commands available in the CLI.",source:"@site/../docs/tooling/cli/03-commands.md",sourceDirName:"tooling/cli",slug:"/tooling/cli/commands",permalink:"/docs/next/tooling/cli/commands",draft:!1,unlisted:!1,editUrl:"https://github.com/backstage/backstage/edit/master/docs/tooling/cli/03-commands.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"commands",title:"Commands",description:"Descriptions of all commands available in the CLI."},sidebar:"docs",previous:{title:"Build System",permalink:"/docs/next/tooling/cli/build-system"},next:{title:"CLI Templates",permalink:"/docs/next/tooling/cli/templates"}},l={},r=[{value:"help",id:"help",level:2},{value:"repo start",id:"repo-start",level:2},{value:"repo build",id:"repo-build",level:2},{value:"repo lint",id:"repo-lint",level:2},{value:"repo test",id:"repo-test",level:2},{value:"package start",id:"package-start",level:2},{value:"package build",id:"package-build",level:2},{value:"package lint",id:"package-lint",level:2},{value:"package test",id:"package-test",level:2},{value:"package clean",id:"package-clean",level:2},{value:"package prepack",id:"package-prepack",level:2},{value:"package postpack",id:"package-postpack",level:2},{value:"new",id:"new",level:2},{value:"config:docs",id:"configdocs",level:2},{value:"config:print",id:"configprint",level:2},{value:"config:check",id:"configcheck",level:2},{value:"config:schema",id:"configschema",level:2},{value:"versions:bump",id:"versionsbump",level:2},{value:"build-workspace",id:"build-workspace",level:2},{value:"create-github-app",id:"create-github-app",level:2},{value:"info",id:"info",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"This page lists all commands provided by the Backstage CLI, what they're for,\nand where to use them."}),"\n",(0,t.jsx)(n.h2,{id:"help",children:"help"}),"\n",(0,t.jsxs)(n.p,{children:["This command displays a help summary or detailed help screens for each command.\nBelow is a cleaned up output of ",(0,t.jsx)(n.code,{children:"yarn backstage-cli --help"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"new [options]                                  Open up an interactive guide to creating new things in\n                                                your app\nconfig:docs [options]                          Browse the configuration reference documentation\nconfig:print [options]                         Print the app configuration for the current package\nconfig:check [options]                         Validate that the given configuration loads and matches\n                                                schema\nconfig:schema [options]                        Print configuration schema\nrepo [command]                                 Command that run across an entire Backstage project\npackage [command]                              Lifecycle scripts for individual packages\nmigrate [command]                              Migration utilities\nversions:bump [options]                        Bump Backstage packages to the latest versions\nclean                                          Delete cache directories [DEPRECATED]\nbuild-workspace <workspace-dir> [packages...]  Builds a temporary dist workspace from the provided\n                                                packages\ncreate-github-app <github-org>                 Create new GitHub App in your organization.\ninfo                                           Show helpful information for debugging and reporting bugs\nhelp [command]                                 display help for command\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"package"})," command category, ",(0,t.jsx)(n.code,{children:"yarn backstage-cli package --help"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"start [options]                  Start a package for local development\nbuild [options]                  Build a package for production deployment or publishing\nlint [options] [directories...]  Lint a package\ntest                             Run tests, forwarding args to Jest, defaulting to watch mode\nclean                            Delete cache directories\nprepack                          Prepares a package for packaging before publishing\npostpack                         Restores the changes made by the prepack command\nhelp [command]                   display help for command\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"repo"})," command category, ",(0,t.jsx)(n.code,{children:"yarn backstage-cli repo --help"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"start [options] [packageName...]  Starts packages in the repo for local development\nbuild [options]                   Build packages in the project, excluding bundled app and backend packages.\ntest [options]                    Run tests, forwarding args to Jest, defaulting to watch mode\nlint [options]                    Lint all packages in the project\nfix [options]                     Automatically fix packages in the project\nclean                             Delete cache and output directories\nlist-deprecations [options]       List deprecations\nhelp [command]                    display help for command\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"migrate"})," command category, ",(0,t.jsx)(n.code,{children:"yarn backstage-cli migrate --help"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"package-roles         Add package role field to packages that don't have it\npackage-scripts       Set package scripts according to each package role\npackage-exports       Synchronize package subpath export definitions\npackage-lint-configs  Migrates all packages to use @backstage/cli/config/eslint-factory\nreact-router-deps     Migrates the react-router dependencies for all packages to be peer dependencies\nhelp [command]        display help for command\n"})}),"\n",(0,t.jsx)(n.h2,{id:"repo-start",children:"repo start"}),"\n",(0,t.jsxs)(n.p,{children:["Start a set of packages in the project for local development. If no explicit packages are listed via arguments or options, packages will instead be selected based on their ",(0,t.jsx)(n.a,{href:"/docs/next/tooling/cli/build-system#package-roles",children:"package role"}),". If a single set of frontend and/or backend packages are found, they will be started. If there are multiple matches the directories 'packages/app' and 'packages/backend' will be preferred. If no matches are found the command will fall back to expecting a single plugin frontend and/or backend package to start instead."]}),"\n",(0,t.jsxs)(n.p,{children:["Any ",(0,t.jsx)(n.code,{children:"--config"})," options in the ",(0,t.jsx)(n.code,{children:"start"})," script in ",(0,t.jsx)(n.code,{children:"package.json"})," of the selected packages will be picked up and used, unless a ",(0,t.jsx)(n.code,{children:"--config"})," option is provided to this command, in which case it will be used instead."]}),"\n",(0,t.jsxs)(n.p,{children:["Any ",(0,t.jsx)(n.code,{children:"--require"})," option in the ",(0,t.jsx)(n.code,{children:"start"})," script in ",(0,t.jsx)(n.code,{children:"package.json"})," of the selected backend package will be picked up and used."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"Usage: backstage-cli repo start [options] [packageNameOrPath...]\n\nStarts packages in the repo for local development\n\nArguments:\n  packageNameOrPath     Run the specified packages instead of the defaults.\n\nOptions:\n  --plugin <pluginId>   Start the dev entry-point for any matching plugin package in the repo (default: [])\n  --config <path>       Config files to load instead of app-config.yaml (default: [])\n  --inspect [host]      Enable debugger in Node.js environments. Applies to backend package only\n  --inspect-brk [host]  Enable debugger in Node.js environments, breaking before code starts. Applies to backend package only\n  --require <path...>   Add a --require argument to the node process. Applies to backend package only\n  --link <path>         Link an external workspace for module resolution\n"})}),"\n",(0,t.jsx)(n.h2,{id:"repo-build",children:"repo build"}),"\n",(0,t.jsxs)(n.p,{children:["Builds all packages in the project, excluding bundled packages by default, i.e. ones\nwith the role ",(0,t.jsx)(n.code,{children:"'frontend'"})," or ",(0,t.jsx)(n.code,{children:"'backend'"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"Usage: backstage-cli repo build [options]\n\nBuild packages in the project, excluding bundled app and backend packages.\n\nOptions:\n  --all          Build all packages, including bundled app and backend packages.\n  --since <ref>  Only build packages and their dev dependents that changed since the specified ref\n"})}),"\n",(0,t.jsx)(n.h2,{id:"repo-lint",children:"repo lint"}),"\n",(0,t.jsx)(n.p,{children:"Lint all packages in the project."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:'Usage: backstage-cli repo lint [options]\n\nLint all packages in the project\n\nOptions:\n  --format <format>         Lint report output format (default: "eslint-formatter-friendly")\n  --since <ref>             Only lint packages that changed since the specified ref\n  --successCache            Enable success caching, which skips running tests for unchanged packages that were successful in the previous run\n  --successCacheDir <path>  Set the success cache location, (default: node_modules/.cache/backstage-cli)\n  --fix                     Attempt to automatically fix violations\n'})}),"\n",(0,t.jsx)(n.h2,{id:"repo-test",children:"repo test"}),"\n",(0,t.jsxs)(n.p,{children:["Test packages in the project. It is recommended to have this command be used as the ",(0,t.jsx)(n.code,{children:"test"})," script in the root ",(0,t.jsx)(n.code,{children:"package.json"})," in your project:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",metastring:'title="package.json in the root of your project"',children:'{\n  ...\n  "scripts": {\n    ...\n    "test": "backstage-cli repo test"\n  }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["If run without any arguments it will default to running changed tests in watch mode, unless the ",(0,t.jsx)(n.code,{children:"CI"})," environment flag is set, in which case it will run all tests without watching:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",metastring:'title="Run changes tests from repo root"',children:"yarn test\n"})}),"\n",(0,t.jsx)(n.p,{children:"If arguments are provided, they will be forwarded to Jest and used to filter test to execute. If full paths to tests are provided, only those tests will be included, for example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",metastring:'title="Run specific tests from repo root"',children:"yarn test packages/app/src/App.test.tsx\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If you want to avoid re-running tests that have not changed since the last successful run in CI, you can use the ",(0,t.jsx)(n.code,{children:"--successCache"})," flag. By default this cache is stored in ",(0,t.jsx)(n.code,{children:"node_modules/.cache/backstage-cli"}),", but you can choose a different directory with the ",(0,t.jsx)(n.code,{children:"--successCacheDir <path>"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"Usage: backstage-cli repo test [options]\n\nRun tests, forwarding args to Jest, defaulting to watch mode\n\nOptions:\n  --since <ref>             Only test packages that changed since the specified ref\n  --successCache            Enable success caching, which skips running tests for unchanged packages that were successful in the previous run\n  --successCacheDir <path>  Set the success cache location, (default: node_modules/.cache/backstage-cli)\n  --jest-help               Show help for Jest CLI options, which are passed through\n  -h, --help                display help for command\n"})}),"\n",(0,t.jsx)(n.h2,{id:"package-start",children:"package start"}),"\n",(0,t.jsxs)(n.p,{children:["Starts the package for local development. See the frontend and backend development parts in the build system ",(0,t.jsx)(n.a,{href:"/docs/next/tooling/cli/build-system#bundling",children:"bundling"})," section for more details."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:'Usage: backstage-cli package start [options]\n\nStart a package for local development\n\nOptions:\n  --config <path>      Config files to load instead of app-config.yaml (default: [])\n  --role <name>       Run the command with an explicit package role\n  --check             Enable type checking and linting if available\n  --inspect           Enable debugger in Node.js environments\n  --inspect-brk       Enable debugger in Node.js environments, breaking before code starts\n  --entrypoint <path> Entry directory path (uses index file) or entry file path (without extension). Defaults to "dev"\n'})}),"\n",(0,t.jsx)(n.h2,{id:"package-build",children:"package build"}),"\n",(0,t.jsxs)(n.p,{children:["Build an individual package based on its role. See the build system ",(0,t.jsx)(n.a,{href:"/docs/next/tooling/cli/build-system#building",children:"building"})," and ",(0,t.jsx)(n.a,{href:"/docs/next/tooling/cli/build-system#bundling",children:"bundling"})," sections for more details."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"Usage: backstage-cli package build [options]\n\nBuild a package for production deployment or publishing\n\nOptions:\n  --role <name>              Run the command with an explicit package role\n  --minify                   Minify the generated code. Does not apply to app package (app is minified by default).\n  --skip-build-dependencies  Skip the automatic building of local dependencies. Applies to backend packages only.\n  --stats                    If bundle stats are available, write them to the output directory. Applies to app packages only.\n  --config <path>            Config files to load instead of app-config.yaml. Applies to app packages only. (default: [])\n"})}),"\n",(0,t.jsx)(n.h2,{id:"package-lint",children:"package lint"}),"\n",(0,t.jsxs)(n.p,{children:["Lint a package. In addition to the default ",(0,t.jsx)(n.code,{children:"eslint"})," behavior, this command will\ninclude TypeScript files, treat warnings as errors, and default to linting the\nentire directory if no specific files are listed. For more information, see the\nbuild system ",(0,t.jsx)(n.a,{href:"/docs/next/tooling/cli/build-system#linting",children:"linting"})," section."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:'Usage: backstage-cli package lint [options]\n\nLint a package\n\nOptions:\n  --format <format>        Lint report output format (default: "eslint-formatter-friendly")\n  --fix                    Attempt to automatically fix violations\n  --max-warnings <number>  Fail if more than this number of warnings. -1 allows warnings. (default: -1)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"package-test",children:"package test"}),"\n",(0,t.jsxs)(n.p,{children:["Run tests, forwarding all unknown options to Jest, and defaulting to watch mode.\nWhen executing the tests, ",(0,t.jsx)(n.code,{children:"process.env.NODE_ENV"})," will be set to ",(0,t.jsx)(n.code,{children:'"test"'}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["This command uses a default Jest configuration that is included in the CLI,\nwhich is set up with similar goals for speed, scale, and working within a\nmonorepo. The configuration sets the ",(0,t.jsx)(n.code,{children:"src"})," as the root directory, enforces the\n",(0,t.jsx)(n.code,{children:".test."})," infix for tests, and uses ",(0,t.jsx)(n.code,{children:"src/setupTests.ts"})," as the test setup\nlocation. The included configuration also supports test execution at the root of\na yarn workspaces monorepo by automatically creating one grouped configuration\nthat includes all packages that have ",(0,t.jsx)(n.code,{children:"backstage-cli test"})," in their package\n",(0,t.jsx)(n.code,{children:"test"})," script."]}),"\n",(0,t.jsxs)(n.p,{children:["For more information about configuration overrides and editor support, see the ",(0,t.jsx)(n.a,{href:"/docs/next/tooling/cli/build-system#jest-configuration",children:"Jest Configuration section"})," in the build system documentation."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"Usage: backstage-cli package test [options]\n\nRun tests, forwarding args to Jest, defaulting to watch mode\n\nOptions:\n  --backstage-cli-help    display help for command\n"})}),"\n",(0,t.jsx)(n.h2,{id:"package-clean",children:"package clean"}),"\n",(0,t.jsx)(n.p,{children:"Remove cache and output directories."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"Usage: backstage-cli package clean [options]\n\nDelete cache directories\n"})}),"\n",(0,t.jsx)(n.h2,{id:"package-prepack",children:"package prepack"}),"\n",(0,t.jsxs)(n.p,{children:["This command should be added as ",(0,t.jsx)(n.code,{children:"scripts.prepack"})," in all packages. It enables\npackaging- and publish-time overrides for fields inside ",(0,t.jsx)(n.code,{children:"packages.json"}),".\nFor more details, see the build system ",(0,t.jsx)(n.a,{href:"/docs/next/tooling/cli/build-system#publishing",children:"publishing"})," section."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"Usage: backstage-cli package prepack [options]\n\nPrepares a package for packaging before publishing\n"})}),"\n",(0,t.jsx)(n.h2,{id:"package-postpack",children:"package postpack"}),"\n",(0,t.jsxs)(n.p,{children:["This should be added as ",(0,t.jsx)(n.code,{children:"scripts.postpack"})," in all packages. It restores\n",(0,t.jsx)(n.code,{children:"package.json"})," to what it looked like before calling the ",(0,t.jsx)(n.code,{children:"prepack"})," command."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"Usage: backstage-cli package postpack [options]\n\nRestores the changes made by the prepack command\n"})}),"\n",(0,t.jsx)(n.h2,{id:"new",children:"new"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"new"})," command opens up an interactive guide for you to create new things\nin your app. If you do not pass in any options it is completely interactive, but\nit is possible to pre-select what you want to create using the ",(0,t.jsx)(n.code,{children:"--select"})," flag,\nand provide options using ",(0,t.jsx)(n.code,{children:"--option"}),", for example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"backstage-cli new --select plugin --option pluginId=foo\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This command is typically added as script in the root ",(0,t.jsx)(n.code,{children:"package.json"})," to be\nexecuted with ",(0,t.jsx)(n.code,{children:"yarn new"}),". For example you may have it set up like this:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "scripts": {\n    "new": "backstage-cli new"\n  }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"new"})," command comes with a default collection of plugins/packages, however,\nyou can customize this list and even create your own CLI templates. For more\ninformation see ",(0,t.jsx)(n.a,{href:"/docs/next/tooling/cli/templates",children:"CLI Templates"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"Usage: backstage-cli new\n\nOptions:\n  -h, --help               display help for command\n"})}),"\n",(0,t.jsx)(n.h2,{id:"configdocs",children:"config:docs"}),"\n",(0,t.jsx)(n.p,{children:"This commands opens up the reference documentation of your apps local\nconfiguration schema in the browser. This is useful to get an overview of what\nconfiguration values are available to use, a description of what they do and\ntheir format, and where they get sent."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"Usage: backstage-cli config:docs [options]\n\nBrowse the configuration reference documentation\n\nOptions:\n  --package <name>  Only include the schema that applies to the given package\n  -h, --help        display help for command\n"})}),"\n",(0,t.jsx)(n.h2,{id:"configprint",children:"config:print"}),"\n",(0,t.jsxs)(n.p,{children:["Print the static configuration, defaulting to reading ",(0,t.jsx)(n.code,{children:"app-config.yaml"})," in the\nrepo root, using schema collected from all local packages in the repo."]}),"\n",(0,t.jsxs)(n.p,{children:["For example, to validate that a given configuration value is visible in the\nfrontend when building the ",(0,t.jsx)(n.code,{children:"my-app"})," package, you can use the following:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"yarn backstage-cli config:print --frontend --package my-app\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"Usage: backstage-cli config:print [options]\n\nOptions:\n  --package <name>   Only load config schema that applies to the given package\n  --lax              Do not require environment variables to be set\n  --frontend         Print only the frontend configuration\n  --with-secrets     Include secrets in the printed configuration\n  --format <format>  Format to print the configuration in, either json or yaml [yaml]\n  --config <path>    Config files to load instead of app-config.yaml (default: [])\n  -h, --help         display help for command\n"})}),"\n",(0,t.jsx)(n.h2,{id:"configcheck",children:"config:check"}),"\n",(0,t.jsxs)(n.p,{children:["Validate that static configuration loads and matches schema, defaulting to\nreading ",(0,t.jsx)(n.code,{children:"app-config.yaml"})," in the repo root and using schema collected from all\nlocal packages in the repo."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"Usage: backstage-cli config:check [options]\n\nOptions:\n  --package <name>  Only load config schema that applies to the given package\n  --lax             Do not require environment variables to be set\n  --frontend        Only validate the frontend configuration\n  --deprecated      Output deprecated configuration settings\n  --strict          Ensure that the provided config(s) has no errors and does not contain keys not in the schema.\n  --config <path>   Config files to load instead of app-config.yaml (default: [])\n  -h, --help        display help for command\n"})}),"\n",(0,t.jsx)(n.h2,{id:"configschema",children:"config:schema"}),"\n",(0,t.jsx)(n.p,{children:"Dump the configuration schema that was collected from all local packages in the\nrepo."}),"\n",(0,t.jsxs)(n.p,{children:["Note: when run by ",(0,t.jsx)(n.code,{children:"yarn"}),", supply the yarn option ",(0,t.jsx)(n.code,{children:"--silent"})," if you are using the\noutput in a command line pipe to avoid non schema output in the pipeline."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"Usage: backstage-cli config:schema [options]\n\nPrint configuration schema\n\nOptions:\n  --package <name>   Only output config schema that applies to the given package\n  --format <format>  Format to print the schema in, either json or yaml [yaml]\n  -h, --help         display help for command\n"})}),"\n",(0,t.jsx)(n.h2,{id:"versionsbump",children:"versions:bump"}),"\n",(0,t.jsxs)(n.p,{children:["Bump all ",(0,t.jsx)(n.code,{children:"@backstage"})," packages to the latest versions. This checks for updates\nin the package registry, and will update entries ",(0,t.jsx)(n.code,{children:"package.json"})," files when necessary. See more how this command can be configured and used ",(0,t.jsx)(n.a,{href:"/docs/next/getting-started/keeping-backstage-updated",children:"for keeping Backstage updated"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:'Usage: backstage-cli versions:bump [options]\n\nOptions:\n  -h, --help        display help for command\n  --pattern <glob>  Override glob for matching packages to upgrade\n  --release <version|next|main> Bump to a specific Backstage release line or version (default: "main")\n'})}),"\n",(0,t.jsx)(n.h2,{id:"build-workspace",children:"build-workspace"}),"\n",(0,t.jsxs)(n.p,{children:["Builds a mirror of the workspace using the packaged production version of each\npackage. This essentially calls ",(0,t.jsx)(n.code,{children:"yarn pack"})," in each included package and unpacks\nthe resulting archive in the target ",(0,t.jsx)(n.code,{children:"workspace-dir"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"Usage: backstage-cli build-workspace [options] <workspace-dir>\n"})}),"\n",(0,t.jsx)(n.h2,{id:"create-github-app",children:"create-github-app"}),"\n",(0,t.jsxs)(n.p,{children:["Creates a GitHub App in your GitHub organization. This is an alternative to\ntoken-based ",(0,t.jsx)(n.a,{href:"/docs/next/integrations/github/locations",children:"GitHub integration"}),". See\n",(0,t.jsx)(n.a,{href:"/docs/next/integrations/github/github-apps",children:"GitHub Apps for Backstage Authentication"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Launches a browser to create the App through GitHub and saves the result as a\nYAML file that can be referenced in the GitHub integration configuration."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"Usage: backstage-cli create-github-app <github-org>\n"})}),"\n",(0,t.jsx)(n.h2,{id:"info",children:"info"}),"\n",(0,t.jsxs)(n.p,{children:["Outputs debug information which is useful when opening an issue. Outputs system\ninformation, node.js and npm versions, CLI version and type (inside backstage\nrepo or a created app), all ",(0,t.jsx)(n.code,{children:"@backstage/*"})," package dependency versions."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"Usage: backstage-cli info\n"})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},221020:(e,n,a)=>{var t=a(296540),i=Symbol.for("react.element"),s=Symbol.for("react.fragment"),c=Object.prototype.hasOwnProperty,o=t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function r(e,n,a){var t,s={},r=null,d=null;for(t in void 0!==a&&(r=""+a),void 0!==n.key&&(r=""+n.key),void 0!==n.ref&&(d=n.ref),n)c.call(n,t)&&!l.hasOwnProperty(t)&&(s[t]=n[t]);if(e&&e.defaultProps)for(t in n=e.defaultProps)void 0===s[t]&&(s[t]=n[t]);return{$$typeof:i,type:e,key:r,ref:d,props:s,_owner:o.current}}n.Fragment=s,n.jsx=r,n.jsxs=r},474848:(e,n,a)=>{e.exports=a(221020)},28453:(e,n,a)=>{a.d(n,{R:()=>c,x:()=>o});var t=a(296540);const i={},s=t.createContext(i);function c(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);