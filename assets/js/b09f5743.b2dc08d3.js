/*! For license information please see b09f5743.b2dc08d3.js.LICENSE.txt */
"use strict";(self.webpackChunkbackstage_microsite=self.webpackChunkbackstage_microsite||[]).push([[929739],{377070:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var s=n(474848),a=n(28453);const r={id:"migrating-from-v1beta2-to-v1beta3",title:"Migrating to v1beta3 templates",description:"How to migrate your existing templates to beta3 syntax"},i="What's new?",o={id:"features/software-templates/migrating-from-v1beta2-to-v1beta3",title:"Migrating to v1beta3 templates",description:"How to migrate your existing templates to beta3 syntax",source:"@site/versioned_docs/version-stable/features/software-templates/migrating-from-v1beta2-to-v1beta3.md",sourceDirName:"features/software-templates",slug:"/features/software-templates/migrating-from-v1beta2-to-v1beta3",permalink:"/docs/features/software-templates/migrating-from-v1beta2-to-v1beta3",draft:!1,unlisted:!1,editUrl:"https://github.com/backstage/backstage/edit/master/docs/features/software-templates/migrating-from-v1beta2-to-v1beta3.md",tags:[],version:"stable",frontMatter:{id:"migrating-from-v1beta2-to-v1beta3",title:"Migrating to v1beta3 templates",description:"How to migrate your existing templates to beta3 syntax"},sidebar:"docs",previous:{title:"Migrating to react-jsonschema-form@v5",permalink:"/docs/features/software-templates/migrating-to-rjsf-v5"},next:{title:"Dry Run Testing",permalink:"/docs/features/software-templates/dry-run-testing"}},l={},d=[{value:"Add the Processor to the <code>plugin-catalog-backend</code>",id:"add-the-processor-to-the-plugin-catalog-backend",level:2},{value:"<code>backstage.io/v1beta2</code> -&gt; <code>scaffolder.backstage.io/v1beta3</code>",id:"backstageiov1beta2---scaffolderbackstageiov1beta3",level:2},{value:"<code>${{ }}</code> instead of <code>&quot;{{ }}&quot;</code>",id:"--instead-of--",level:2},{value:"No more <code>eq</code> or <code>not</code> helpers",id:"no-more-eq-or-not-helpers",level:2},{value:"No more <code>json</code> helper",id:"no-more-json-helper",level:2},{value:"<code>parseRepoUrl</code> is now a <code>filter</code>",id:"parserepourl-is-now-a-filter",level:2},{value:"Links should be used instead of named outputs",id:"links-should-be-used-instead-of-named-outputs",level:2},{value:"Watch out for <code>dash-case</code>",id:"watch-out-for-dash-case",level:2},{value:"Summary",id:"summary",level:3}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"whats-new",children:"What's new?"})}),"\n",(0,s.jsx)(t.p,{children:"Well then, here we are! \ud83d\ude80"}),"\n",(0,s.jsxs)(t.p,{children:["Backstage has had many forms of templating languages throughout different\nplugins and different systems. We've had ",(0,s.jsx)(t.code,{children:"cookiecutter"})," syntax in templates, and\nwe also had ",(0,s.jsx)(t.code,{children:"handlebars"})," templating in the ",(0,s.jsx)(t.code,{children:"kind: Template"}),". Then we wanted to\nremove the additional dependency on ",(0,s.jsx)(t.code,{children:"cookiecutter"})," for Software Templates out of\nthe box, so we introduced ",(0,s.jsx)(t.code,{children:"nunjucks"})," as an alternative in ",(0,s.jsx)(t.code,{children:"fetch:template"}),"\naction which is based on the ",(0,s.jsx)(t.code,{children:"jinja2"})," syntax so they're pretty similar. In an\neffort to reduce confusion and unify on to one templating language, we're\nofficially deprecating support for ",(0,s.jsx)(t.code,{children:"handlebars"})," templating in the\n",(0,s.jsx)(t.code,{children:"kind: Template"})," entities with ",(0,s.jsx)(t.code,{children:"apiVersion"})," ",(0,s.jsx)(t.code,{children:"scaffolder.backstage.io/v1beta3"}),"\nand moving to using ",(0,s.jsx)(t.code,{children:"nunjucks"})," instead."]}),"\n",(0,s.jsxs)(t.p,{children:["This provides us a lot of built in ",(0,s.jsx)(t.code,{children:"filters"})," (",(0,s.jsx)(t.code,{children:"handlebars"})," helpers), that as\nTemplate authors will give you much more flexibility out of the box, and also\nopen up sharing of filters in the Entity and the actual ",(0,s.jsx)(t.code,{children:"skeleton"})," too, and\nremoving the slight differences between the two languages."]}),"\n",(0,s.jsxs)(t.p,{children:["We've also removed a lot of the built in helpers that we shipped with\n",(0,s.jsx)(t.code,{children:"handlebars"}),", as they're now supported as first class citizens by either\n",(0,s.jsx)(t.code,{children:"nunjucks"})," or the new ",(0,s.jsx)(t.code,{children:"scaffolder"})," when using ",(0,s.jsx)(t.code,{children:"scaffolder.backstage.io/v1beta3"}),"\n",(0,s.jsx)(t.code,{children:"apiVersion"})]}),"\n",(0,s.jsxs)(t.p,{children:["The migration path is pretty simple, and we've removed some of the pain points\nfrom writing the ",(0,s.jsx)(t.code,{children:"handlebars"})," templates too. Let's go through what's new and how\nto upgrade."]}),"\n",(0,s.jsxs)(t.h2,{id:"add-the-processor-to-the-plugin-catalog-backend",children:["Add the Processor to the ",(0,s.jsx)(t.code,{children:"plugin-catalog-backend"})]}),"\n",(0,s.jsxs)(t.p,{children:["An important change is to add the required processor to your ",(0,s.jsx)(t.code,{children:"packages/backend/src/plugins/catalog.ts"})]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:'title="packages/backend/src/plugins/catalog.ts"',children:"/* highlight-add-next-line */\nimport { ScaffolderEntitiesProcessor } from '@backstage/plugin-scaffolder-backend';\n\nexport default async function createPlugin(\n  env: PluginEnvironment,\n): Promise<Router> {\n  const builder = await CatalogBuilder.create(env);\n  /* highlight-add-next-line */\n  builder.addProcessor(new ScaffolderEntitiesProcessor());\n  const { processingEngine, router } = await builder.build();\n\n  // ..\n}\n"})}),"\n",(0,s.jsxs)(t.h2,{id:"backstageiov1beta2---scaffolderbackstageiov1beta3",children:[(0,s.jsx)(t.code,{children:"backstage.io/v1beta2"})," -> ",(0,s.jsx)(t.code,{children:"scaffolder.backstage.io/v1beta3"})]}),"\n",(0,s.jsxs)(t.p,{children:["The most important change is that you'll need to switch over the ",(0,s.jsx)(t.code,{children:"apiVersion"})," in\nyour templates to the new one."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"  kind: Template\n  # highlight-remove-next-line\n  apiVersion: backstage.io/v1beta2\n  # highlight-add-next-line\n  apiVersion: scaffolder.backstage.io/v1beta3\n"})}),"\n",(0,s.jsxs)(t.h2,{id:"--instead-of--",children:[(0,s.jsx)(t.code,{children:"${{ }}"})," instead of ",(0,s.jsx)(t.code,{children:'"{{ }}"'})]}),"\n",(0,s.jsxs)(t.p,{children:["One really big readability issue and cause for confusion was the fact that with\n",(0,s.jsx)(t.code,{children:"handlebars"})," and ",(0,s.jsx)(t.code,{children:"yaml"})," you always had to wrap your templating strings in quotes\nin ",(0,s.jsx)(t.code,{children:"yaml"})," so that it didn't try to parse it as a ",(0,s.jsx)(t.code,{children:"json"})," object and fail. This\nwas pretty annoying, as it also meant that all things look like strings. Now\nthat's no longer the case, you can now remove the ",(0,s.jsx)(t.code,{children:'""'})," and take advantage of\nwriting nice ",(0,s.jsx)(t.code,{children:"yaml"})," files that just work."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"spec:\n  steps:\n      input:\n        # highlight-remove-next-line\n        description: 'This is {{ parameters.name }}'\n        # highlight-add-next-line\n        description: This is ${{ parameters.name }}\n        # highlight-remove-next-line\n        repoUrl: '{{ parameters.repoUrl }}'\n        # highlight-add-next-line\n        repoUrl: ${{ parameters.repoUrl }}\n"})}),"\n",(0,s.jsxs)(t.h2,{id:"no-more-eq-or-not-helpers",children:["No more ",(0,s.jsx)(t.code,{children:"eq"})," or ",(0,s.jsx)(t.code,{children:"not"})," helpers"]}),"\n",(0,s.jsxs)(t.p,{children:["These helpers are no longer needed with the more expressive ",(0,s.jsx)(t.code,{children:"api"})," that\n",(0,s.jsx)(t.code,{children:"nunjucks"})," provides. You can simply use the built-in ",(0,s.jsx)(t.code,{children:"nunjucks"})," and ",(0,s.jsx)(t.code,{children:"jinja2"}),"\nstyle operators."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:'spec:\n  steps:\n      input:\n        # highlight-remove-next-line\n        if: \'{{ eq parameters.value "backstage" }}\'\n        # highlight-add-next-line\n        if: ${{ parameters.value === "backstage" }}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["And then for the ",(0,s.jsx)(t.code,{children:"not"})]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:'spec:\n  steps:\n      input:\n        # highlight-remove-next-line\n        if: \'{{ not parameters.value "backstage" }}\'\n        # highlight-add-next-line\n        if: ${{ parameters.value !== "backstage" }}\n'})}),"\n",(0,s.jsx)(t.p,{children:"Much better right? \u2728"}),"\n",(0,s.jsxs)(t.h2,{id:"no-more-json-helper",children:["No more ",(0,s.jsx)(t.code,{children:"json"})," helper"]}),"\n",(0,s.jsxs)(t.p,{children:["This helper is no longer needed, as we've added support for complex values and\nsupporting the additional primitive values now rather than everything being a\n",(0,s.jsx)(t.code,{children:"string"}),". This means that now that you can pass around ",(0,s.jsx)(t.code,{children:"parameters"})," and it\nshould all work as expected and keep the type that has been declared in the\ninput schema."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"spec:\n  parameters:\n    test:\n      type: number\n      name: Test Number\n    address:\n      type: object\n      required:\n        - line1\n      properties:\n        line1:\n          type: string\n          name: Line 1\n        line2:\n          type: string\n          name: Line 2\n\n  steps:\n    - id: test step\n      action: run:something\n      input:\n        # highlight-remove-next-line\n        address: '{{ json parameters.address }}'\n        # highlight-add-next-line\n        address: ${{ parameters.address }}\n        # highlight-remove-next-line\n        test: '{{ parameters.test }}'\n        # highlight-add-next-line\n        test: ${{ parameters.test }} # this will now make sure that the type of test is a number \ud83d\ude4f\n"})}),"\n",(0,s.jsxs)(t.h2,{id:"parserepourl-is-now-a-filter",children:[(0,s.jsx)(t.code,{children:"parseRepoUrl"})," is now a ",(0,s.jsx)(t.code,{children:"filter"})]}),"\n",(0,s.jsxs)(t.p,{children:["All calls to ",(0,s.jsx)(t.code,{children:"parseRepoUrl"})," are now a ",(0,s.jsx)(t.code,{children:"jinja2"})," ",(0,s.jsx)(t.code,{children:"filter"}),", which means you'll need\nto update the syntax."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"spec:\n  steps:\n      input:\n        # highlight-remove-next-line\n        repoUrl: '{{ parseRepoUrl parameters.repoUrl }}'\n        # highlight-add-next-line\n        repoUrl: ${{ parameters.repoUrl | parseRepoUrl }}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Now we have complex value support here too, expect that this ",(0,s.jsx)(t.code,{children:"filter"})," will go\naway in future versions and the ",(0,s.jsx)(t.code,{children:"RepoUrlPicker"})," will return an object so\n",(0,s.jsx)(t.code,{children:"parameters.repoUrl"})," will already be a\n",(0,s.jsx)(t.code,{children:"{ host: string; owner: string; repo: string }"})," \ud83d\ude80"]}),"\n",(0,s.jsx)(t.h2,{id:"links-should-be-used-instead-of-named-outputs",children:"Links should be used instead of named outputs"}),"\n",(0,s.jsxs)(t.p,{children:["Previously, it was possible to provide links to the frontend using the named output ",(0,s.jsx)(t.code,{children:"entityRef"})," and ",(0,s.jsx)(t.code,{children:"remoteUrl"}),".\nThese should be moved to ",(0,s.jsx)(t.code,{children:"links"})," under the ",(0,s.jsx)(t.code,{children:"output"})," object instead."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"output:\n  # highlight-remove-start\n  remoteUrl: {{ steps['publish'].output.remoteUrl }}\n  entityRef: {{ steps['register'].output.entityRef }}\n  # highlight-remove-end\n  # highlight-add-start\n  links:\n    - title: Repository\n      url: ${{ steps['publish'].output.remoteUrl }}\n    - title: Open in catalog\n      icon: catalog\n      entityRef: ${{ steps['register'].output.entityRef }}\n      # highlight-add-end\n"})}),"\n",(0,s.jsxs)(t.h2,{id:"watch-out-for-dash-case",children:["Watch out for ",(0,s.jsx)(t.code,{children:"dash-case"})]}),"\n",(0,s.jsxs)(t.p,{children:["The nunjucks compiler can run into issues if the ",(0,s.jsx)(t.code,{children:"id"})," fields in your template steps use dash characters, since these IDs translate directly to JavaScript object properties when accessed as output. One possible migration path is to use ",(0,s.jsx)(t.code,{children:"camelCase"})," for your action IDs."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"  steps:\n    # highlight-remove-start\n    id: my-custom-action\n    ...\n\n    id: publish-pull-request\n    input:\n      repoUrl: {{ steps.my-custom-action.output.repoUrl }} # Will not recognize 'my-custom-action' as a JS property since it contains dashes!\n      # highlight-remove-end\n\n  steps:\n    # highlight-add-start\n    id: myCustomAction\n    ...\n\n    id: publishPullRequest\n    input:\n      repoUrl: ${{ steps.myCustomAction.output.repoUrl }}\n      # highlight-add-end\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Alternatively, it's possible to keep the ",(0,s.jsx)(t.code,{children:"dash-case"})," syntax and use brackets for property access as you would in JavaScript:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"input:\n  repoUrl: ${{ steps['my-custom-action'].output.repoUrl }}\n"})}),"\n",(0,s.jsx)(t.h3,{id:"summary",children:"Summary"}),"\n",(0,s.jsxs)(t.p,{children:["Of course, we're always available on ",(0,s.jsx)(t.a,{href:"https://discord.gg/backstage-687207715902193673",children:"discord"})," if\nyou're stuck or something's not working as expected. You can also\n",(0,s.jsx)(t.a,{href:"https://github.com/backstage/backstage/issues/new/choose",children:"raise an issue"})," with\nfeedback or bugs!"]})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},221020:(e,t,n)=>{var s=n(296540),a=Symbol.for("react.element"),r=Symbol.for("react.fragment"),i=Object.prototype.hasOwnProperty,o=s.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function d(e,t,n){var s,r={},d=null,c=null;for(s in void 0!==n&&(d=""+n),void 0!==t.key&&(d=""+t.key),void 0!==t.ref&&(c=t.ref),t)i.call(t,s)&&!l.hasOwnProperty(s)&&(r[s]=t[s]);if(e&&e.defaultProps)for(s in t=e.defaultProps)void 0===r[s]&&(r[s]=t[s]);return{$$typeof:a,type:e,key:d,ref:c,props:r,_owner:o.current}}t.Fragment=r,t.jsx=d,t.jsxs=d},474848:(e,t,n)=>{e.exports=n(221020)},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var s=n(296540);const a={},r=s.createContext(a);function i(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);