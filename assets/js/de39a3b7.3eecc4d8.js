/*! For license information please see de39a3b7.3eecc4d8.js.LICENSE.txt */
"use strict";(self.webpackChunkbackstage_microsite=self.webpackChunkbackstage_microsite||[]).push([[969431],{682315:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var i=t(474848),s=t(28453);const a={id:"templating-extensions",title:"Templating Extensions",description:"Templating extensions system"},r="Templating Filters",l={id:"features/software-templates/templating-extensions",title:"Templating Extensions",description:"Templating extensions system",source:"@site/../docs/features/software-templates/templating-extensions.md",sourceDirName:"features/software-templates",slug:"/features/software-templates/templating-extensions",permalink:"/docs/next/features/software-templates/templating-extensions",draft:!1,unlisted:!1,editUrl:"https://github.com/backstage/backstage/edit/master/docs/features/software-templates/templating-extensions.md",tags:[],version:"current",frontMatter:{id:"templating-extensions",title:"Templating Extensions",description:"Templating extensions system"},sidebar:"docs",previous:{title:"Experimental Features",permalink:"/docs/next/features/software-templates/experimental"},next:{title:"Overview",permalink:"/docs/next/features/techdocs/"}},o={},c=[{value:"Built-in",id:"built-in",level:2},{value:"parseRepoUrl",id:"parserepourl",level:3},{value:"parseEntityRef",id:"parseentityref",level:3},{value:"pick",id:"pick",level:3},{value:"projectSlug",id:"projectslug",level:3},{value:"Streamlining Templating Extension Module Creation with the Backstage CLI",id:"streamlining-templating-extension-module-creation-with-the-backstage-cli",level:2},{value:"Writing your Module",id:"writing-your-module",level:2},{value:"Custom Filter",id:"custom-filter",level:3},{value:"Schema",id:"schema",level:4},{value:"Filter Example Documentation",id:"filter-example-documentation",level:4},{value:"Custom Global Function",id:"custom-global-function",level:3},{value:"Schema",id:"schema-1",level:4},{value:"Global Function Example Documentation",id:"global-function-example-documentation",level:4},{value:"Custom Global Value",id:"custom-global-value",level:3},{value:"Register Templating Extensions with the Legacy Backend System",id:"register-templating-extensions-with-the-legacy-backend-system",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["Backstage templating is powered by ",(0,i.jsx)(n.a,{href:"https://mozilla.github.io/nunjucks",children:"Nunjucks"}),". The basics:"]}),"\n",(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"templating-filters",children:"Templating Filters"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"https://mozilla.github.io/nunjucks/templating.html#filters",children:"filter"})," is a critical mechanism for the rendering of Nunjucks templates,\nproviding a means of transforming values in a familiar ",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Pipeline_(Unix)#Pipelines_in_command_line_interfaces",children:"piped"})," fashion.\nTemplating filters are functions that help you transform data, extract specific\ninformation, and perform various operations in Scaffolder templates."]}),"\n",(0,i.jsx)(n.h2,{id:"built-in",children:"Built-in"}),"\n",(0,i.jsxs)(n.p,{children:['Backstage provides out of the box the following set of "built-in" templating\nfilters (to create your own custom filters, look to the section ',(0,i.jsx)(n.a,{href:"#custom-filter",children:"Custom Filter"})," hereafter):"]}),"\n",(0,i.jsx)(n.h3,{id:"parserepourl",children:"parseRepoUrl"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"parseRepoUrl"})," filter parses a repository URL into its constituent parts:\n",(0,i.jsx)(n.code,{children:"owner"}),", repository name (",(0,i.jsx)(n.code,{children:"repo"}),"), etc."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Usage Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"- id: log\n  name: Parse Repo URL\n  action: debug:log\n  input:\n    message: ${{ parameters.repoUrl | parseRepoUrl }}\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Input"}),": ",(0,i.jsx)(n.code,{children:"github.com?repo=backstage&owner=backstage"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Output"}),': "RepoSpec" (see ',(0,i.jsx)(n.a,{href:"https://backstage.io/docs/reference/plugin-scaffolder-node.parserepourl",children:"parseRepoUrl"}),")"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"parseentityref",children:"parseEntityRef"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"parseEntityRef"})," filter allows you to extract different parts of\nan entity reference, such as the ",(0,i.jsx)(n.code,{children:"kind"}),", ",(0,i.jsx)(n.code,{children:"namespace"}),", and ",(0,i.jsx)(n.code,{children:"name"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Usage example"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Without context"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"- id: log\n  name: Parse Entity Reference\n  action: debug:log\n  input:\n    message: ${{ parameters.owner | parseEntityRef }}\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Input"}),": ",(0,i.jsx)(n.code,{children:"group:techdocs"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Output"}),": ",(0,i.jsx)(n.a,{href:"https://backstage.io/docs/reference/catalog-model.compoundentityref",children:"CompoundEntityRef"})]}),"\n"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"With context"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'- id: log\n  name: Parse Entity Reference\n  action: debug:log\n  input:\n    message: ${{ parameters.owner | parseEntityRef({ defaultKind:"group", defaultNamespace:"another-namespace" }) }}\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Input"}),": ",(0,i.jsx)(n.code,{children:"techdocs"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Output"}),": ",(0,i.jsx)(n.a,{href:"https://backstage.io/docs/reference/catalog-model.compoundentityref",children:"CompoundEntityRef"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"pick",children:"pick"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"pick"})," filter allows you to select a specific property (e.g. ",(0,i.jsx)(n.code,{children:"kind"}),", ",(0,i.jsx)(n.code,{children:"namespace"}),", ",(0,i.jsx)(n.code,{children:"name"}),") from an object."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Usage Example"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"- id: log\n  name: Pick\n  action: debug:log\n  input:\n    message: ${{ parameters.owner | parseEntityRef | pick('name') }}\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Input"}),": ",(0,i.jsx)(n.code,{children:"{ kind: 'Group', namespace: 'default', name: 'techdocs' }"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Output"}),": ",(0,i.jsx)(n.code,{children:"techdocs"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"projectslug",children:"projectSlug"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"projectSlug"})," filter generates a project slug from a repository URL."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Usage Example"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"- id: log\n  name: Project Slug\n  action: debug:log\n  input:\n    message: ${{ parameters.repoUrl | projectSlug }}\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Input"}),": ",(0,i.jsx)(n.code,{children:"github.com?repo=backstage&owner=backstage"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Output"}),": ",(0,i.jsx)(n.code,{children:"backstage/backstage"})]}),"\n"]}),"\n",(0,i.jsx)(n.h1,{id:"templating-globals",children:"Templating Globals"}),"\n",(0,i.jsx)(n.p,{children:"In addition to its powerful filtering functionality, the Nunjucks engine allows\naccess from the template expression context to specified globally-accessible\nreferences. Backstage propagates this capability via the scaffolder backend\nplugin, which we shall soon see in action."}),"\n",(0,i.jsx)(n.h1,{id:"customizing-the-templating-environment",children:"Customizing the templating environment"}),"\n",(0,i.jsx)(n.p,{children:"Custom plugins make it possible to install your own templating extensions, which\nmay be any combination of filters, global functions and global values. With the\nnew backend you would use a scaffolder plugin module for this; later we will\ndemonstrate the analogous approach with the old backend."}),"\n",(0,i.jsx)(n.h2,{id:"streamlining-templating-extension-module-creation-with-the-backstage-cli",children:"Streamlining Templating Extension Module Creation with the Backstage CLI"}),"\n",(0,i.jsx)(n.p,{children:'The creation of a "template environment customization" module in Backstage can\nbe accelerated using the Backstage CLI.'}),"\n",(0,i.jsxs)(n.p,{children:["Start by using the ",(0,i.jsx)(n.code,{children:"yarn backstage-cli new"})," command to generate a scaffolder module. This command sets up the necessary boilerplate code, providing a smooth start:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"$ yarn backstage-cli new\n? What do you want to create?\n  frontend-plugin - A new frontend plugin\n  backend-plugin - A new backend plugin\n\u276f backend-plugin-module - A new backend module that extends an existing backend plugin\n  plugin-web-library - A new web library plugin package\n  plugin-node-library - A new Node.js library plugin package\n  plugin-common-library - A new isomorphic common plugin package\n  web-library - A library package, exporting shared functionality for web environments\n"})}),"\n",(0,i.jsxs)(n.p,{children:["When prompted, use the arrow keys to select the option to generate a ",(0,i.jsx)(n.code,{children:"backend-plugin-module"}),".\nSince we want to extend the Scaffolder backend, enter ",(0,i.jsx)(n.code,{children:"scaffolder"})," when prompted for the ID of the plugin to extend.\nNext, enter the ID (name) of your module. This will be appended to the ",(0,i.jsx)(n.code,{children:"scaffolder-backend-module-"})," prefix. The CLI will then generate the required files and directory structure, for example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"? Enter the ID of the plugin [required] scaffolder\n? Enter the ID of the module [required] foo-bar\n  templating    plugins/scaffolder-backend-module-foo-bar \u2714\n  backend       adding @internal/plugin-scaffolder-backend-module-foo-bar \u2714\n  executing     yarn install \u2714\n  executing     yarn lint --fix \u2714\n\n\ud83c\udf89  Successfully created backend-plugin-module\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Directory Structure"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"plugins\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 scaffolder-backend-module-foo-bar\n\u2502\xa0\xa0 \u251c\u2500\u2500 package.json\n\u2502\xa0\xa0 \u251c\u2500\u2500 README.md\n\u2502\xa0\xa0 \u2514\u2500\u2500 src\n\u2502\xa0\xa0     \u251c\u2500\u2500 index.ts\n\u2502\xa0\xa0     \u2514\u2500\u2500 module.ts\n"})}),"\n",(0,i.jsx)(n.h2,{id:"writing-your-module",children:"Writing your Module"}),"\n",(0,i.jsx)(n.p,{children:"Once the CLI has generated the essential structure for your new scaffolder\nmodule, it's time to implement our templating extensions. Here we'll demonstrate\nhow to create each of the supported extension types."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"src/module.ts"})," is where the magic happens. First, we prepare to utilize the\nassociated (",(0,i.jsxs)(n.em,{children:[(0,i.jsx)(n.strong,{children:"alpha"})," phase"]}),") API extension point by adding the below import to ",(0,i.jsx)(n.code,{children:"src/module.ts"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import { scaffolderTemplatingExtensionPoint } from '@backstage/plugin-scaffolder-node/alpha';\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Considering the generated code, you may observe that everything rests on the\n",(0,i.jsx)(n.code,{children:"createBackendModule"})," call, which after providing some minimal metadata to\nestablish context, specifies a ",(0,i.jsx)(n.code,{children:"register"})," callback whose sole responsibility\nhere is to call, in turn, ",(0,i.jsx)(n.code,{children:"registerInit"})," against the\n",(0,i.jsx)(n.code,{children:"BackendModuleRegistrationPoints"})," argument it receives. Modify this call to\nmake the ",(0,i.jsx)(n.code,{children:"scaffolderTemplatingExtensionPoint"})," available to the specified ",(0,i.jsx)(n.code,{children:"init"}),"\nfunction:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"  register(reg) {\n    reg.registerInit({\n      deps: {\n        ...,\n        templating: scaffolderTemplatingExtensionPoint,\n      },\n      async init({\n        ...,\n        templating\n        }) {\n        ...\n      };\n    });\n  };\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Now we're ready to extend the scaffolder templating engine. For our purposes\nhere we'll drop everything in ",(0,i.jsx)(n.code,{children:"module.ts"}),"; use your own judgment as to the\norganization of your real-world plugin modules."]}),"\n",(0,i.jsx)(n.h3,{id:"custom-filter",children:"Custom Filter"}),"\n",(0,i.jsxs)(n.p,{children:["In this contrived example we add a filter to test whether the incoming string\nvalue contains (at least) a specified number of occurrences of a given\nsubstring. We can easily define this by adding code to our ",(0,i.jsx)(n.code,{children:"init"})," callback:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"async init({\n  ...,\n  templating,\n}) {\n  ...\n  templating.addTemplateFilters({\n    containsOccurrences: (arg: string, substring: string, times: number) => {\n      let pos = 0;\n      let count = 0;\n      while (pos < arg.length) {\n        pos = arg.indexOf(substring, pos);\n        if (pos < 0) {\n          break;\n        }\n        count++;\n      }\n      return count === times;\n    },\n  });\n},\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This demonstrates the bare minimum: a TypeScript ",(0,i.jsx)(n.code,{children:"Record"})," of named templating\nfilter implementations to register. However, by adopting an alternate structure\nwe can document our filter with additional metadata; to utilize this capability\nwe begin by adding a new import:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import { createTemplateFilter } from '@backstage/plugin-scaffolder-node/alpha';\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Then, update your ",(0,i.jsx)(n.code,{children:"init"})," implementation to specify an array rather than an\nobject/record:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"async init({\n  ...,\n  templating,\n}) {\n  ...\n  templating.addTemplateFilters([\n    createTemplateFilter({\n      id: 'containsOccurrences',\n      description: 'determine whether filter input contains a substring N times',\n      filter: (arg: string, substring: string, times: number) => {\n        let pos = 0;\n        let count = 0;\n        while (pos < arg.length) {\n          pos = arg.indexOf(substring, pos);\n          if (pos < 0) {\n            break;\n          }\n          count++;\n        }\n        return count === times;\n      },\n    }),\n  ]);\n},\n"})}),"\n",(0,i.jsxs)(n.p,{children:["With this we have added a ",(0,i.jsx)(n.code,{children:"description"})," to our filter, which helps a template\nauthor to understand the filter's purpose."]}),"\n",(0,i.jsx)(n.h4,{id:"schema",children:"Schema"}),"\n",(0,i.jsxs)(n.p,{children:["To enhance our filter documentation further, we will specify its ",(0,i.jsx)(n.code,{children:"schema"}),"\nusing a callback against the ",(0,i.jsx)(n.a,{href:"https://zod.dev/",children:"Zod"})," schema declaration library:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"    createTemplateFilter({\n      id: 'containsOccurrences',\n      description: 'determine whether filter input contains a substring N times',\n      schema: z =>\n        z.function(\n          z.tuple([\n            z.string().describe('input'),\n            z.string().describe('substring whose occurrences to find'),\n            z.number().describe('number of occurrences to check for'),\n          ]),\n          z.boolean(),\n        ),\n      ...,\n    }),\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Because a filter is, in fact, a function, its schema is defined by generating a\n",(0,i.jsx)(n.a,{href:"https://zod.dev/?id=functions",children:"Zod function schema"})," against the parameter supplied to our schema\ncallback. A filter function is required to have at least one argument; in this\nexample, we have two additional arguments. But what if we modify our filter's\nimplementation function to make ",(0,i.jsx)(n.code,{children:"times"})," optional? Code:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"    createTemplateFilter({\n      id: 'containsOccurrences',\n      ...,\n      filter: (arg: string, substring: string, times?: number) => {\n        if (times === undefined) {\n          // note that, in real life, simply calling this function directly with Nunjucks would suffice rather than implementing a filter:\n          return arg.includes(substring);\n        }\n        // original implementation follows\n        ...\n      },\n    }),\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In this case we should modify our ",(0,i.jsx)(n.code,{children:"schema"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"    createTemplateFilter({\n      ...,\n      schema: z =>\n        z.function(\n          z.tuple([\n            z.string().describe('input'),\n            z.string().describe('substring whose occurrences to find'),\n            z\n              .number()\n              .describe('number of occurrences to check for')\n              .optional(),\n          ]),\n          z.boolean(),\n        ),\n      ...,\n    }),\n"})}),"\n",(0,i.jsx)(n.h4,{id:"filter-example-documentation",children:"Filter Example Documentation"}),"\n",(0,i.jsx)(n.p,{children:"Our filter documentation may benefit from examples which we specify thus:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"    createTemplateFilter({\n      ...,\n      examples: [\n        {\n          description: 'Basic Usage',\n          example: `\\\n- name: Contains Occurrences\n  action: debug:log\n  input:\n    message: \\${{ parameters.projectName | containsOccurrences('-', 2) }}\n          `,\n          notes: `\\\n- **Input**: \\`foo-bar-baz\\`\n- **Output**: \\`true\\`\n      `,\n        },\n        {\n          description: 'Omitting Optional Parameter',\n          example: `\\\n- name: Contains baz\n  action: debug:log\n  input:\n    message: \\${{ parameters.projectName | containsOccurrences('baz') | dump }}\n          `,\n          notes: `\\\n- **Input**: \\`foo-bar\\`\n- **Output**: \\`false\\`\n        `,\n        },\n      ],\n    }),\n"})}),"\n",(0,i.jsx)(n.h3,{id:"custom-global-function",children:"Custom Global Function"}),"\n",(0,i.jsxs)(n.p,{children:["In case your template needs access to a value generated from a function not\nappropriately modeled as a filter, Nunjucks supports the direct invocation of\n",(0,i.jsx)(n.a,{href:"https://mozilla.github.io/nunjucks/templating.html#global-functions",children:"global functions"}),". We might, for example, add to ",(0,i.jsx)(n.code,{children:"init"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"async init({\n  ...,\n  templating,\n}) {\n  ...\n  templating.addTemplateGlobals({\n    now: () => new Date().toISOString(),\n  });\n},\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Here we have implemented a simple mechanism to obtain a timestamp (note that\nbecause we can only pass JSON-compatible--or ",(0,i.jsx)(n.code,{children:"undefined"}),"--values we have chosen\nto model a date/time as an ISO string) using a globally available function."]}),"\n",(0,i.jsx)(n.p,{children:"Again we have the option to make our global function self-documenting. Import:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import {\n  ...,\n  createTemplateGlobalFunction,\n} from '@backstage/plugin-scaffolder-node/alpha';\n"})}),"\n",(0,i.jsx)(n.p,{children:"Then modify:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"  ...\n  templating.addTemplateGlobals([\n    createTemplateGlobalFunction({\n      id: 'now',\n      description:\n        'obtain an ISO representation of the current date and time',\n      fn: () => new Date().toISOString(),\n    }),\n  ]);\n"})}),"\n",(0,i.jsx)(n.h4,{id:"schema-1",children:"Schema"}),"\n",(0,i.jsx)(n.p,{children:"Declaring a global function schema is quite like the schema declaration for a\ntemplating filter:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"    createTemplateGlobal({\n      ...,\n      schema: z => z.function().args().returns(z.string()),\n      ...,\n    }),\n"})}),"\n",(0,i.jsx)(n.h4,{id:"global-function-example-documentation",children:"Global Function Example Documentation"}),"\n",(0,i.jsx)(n.p,{children:"Again, this works in the same way as filter examples:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"    createTemplateGlobal({\n      ...,\n      examples: [\n        {\n          description: 'Obtain the current date/time',\n          example: `\\\n- name: Log Timestamp\n  action: debug:log\n  input:\n    message: Current date/time: \\${{ now() }}\n          `,\n          // optional `notes` omitted from this example\n        },\n      ],\n      ...,\n    }),\n\n"})}),"\n",(0,i.jsx)(n.h3,{id:"custom-global-value",children:"Custom Global Value"}),"\n",(0,i.jsx)(n.p,{children:"Alternatively, you may need to provide templates access to a simple JSON value, which can\nbe registered in this manner:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"async init({\n  ...,\n  templating,\n}) {\n  ...\n  templating.addTemplateGlobals({\n    ...,\n    preferredMetasyntacticIdentifier: 'foo',\n  });\n},\n"})}),"\n",(0,i.jsx)(n.p,{children:"Or the documenting form:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"async init({\n  ...,\n  templating,\n}) {\n  ...\n  templating.addTemplateGlobals([\n    ...,\n    createTemplateGlobalValue({\n      id: 'preferredMetasyntacticIdentifier',\n      value: 'foo',\n      description:\n        'This description is as contrived as the global value it documents',\n    }),\n  ]);\n},\n"})}),"\n",(0,i.jsx)(n.h2,{id:"register-templating-extensions-with-the-legacy-backend-system",children:"Register Templating Extensions with the Legacy Backend System"}),"\n",(0,i.jsxs)(n.p,{children:["Users of the original Backstage backend can register templating extensions by\nspecifying options to the scaffolder backend plugin's ",(0,i.jsx)(n.code,{children:"createRouter"})," function\n(customarily called in ",(0,i.jsx)(n.code,{children:"packages/backend/src/plugins/scaffolder.ts"}),"):"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"additionalTemplateFilters"})," - either of:\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"object mapping filter name to implementation function, or"}),"\n",(0,i.jsxs)(n.li,{children:["array of documented templating filters as returned by the\nutility function ",(0,i.jsx)(n.code,{children:"createTemplateFilter"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"additionalTemplateGlobals"})," - either of:\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"object mapping global name to value or function, or"}),"\n",(0,i.jsxs)(n.li,{children:["array of documented global functions and values as returned by the utility\nfunctions ",(0,i.jsx)(n.code,{children:"createTemplateGlobalFunction"})," and ",(0,i.jsx)(n.code,{children:"createTemplateGlobalValue"})]}),"\n"]}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},221020:(e,n,t)=>{var i=t(296540),s=Symbol.for("react.element"),a=Symbol.for("react.fragment"),r=Object.prototype.hasOwnProperty,l=i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,o={key:!0,ref:!0,__self:!0,__source:!0};function c(e,n,t){var i,a={},c=null,d=null;for(i in void 0!==t&&(c=""+t),void 0!==n.key&&(c=""+n.key),void 0!==n.ref&&(d=n.ref),n)r.call(n,i)&&!o.hasOwnProperty(i)&&(a[i]=n[i]);if(e&&e.defaultProps)for(i in n=e.defaultProps)void 0===a[i]&&(a[i]=n[i]);return{$$typeof:s,type:e,key:c,ref:d,props:a,_owner:l.current}}n.Fragment=a,n.jsx=c,n.jsxs=c},474848:(e,n,t)=>{e.exports=t(221020)},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var i=t(296540);const s={},a=i.createContext(s);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);