/*! For license information please see cca24db9.2363ebe8.js.LICENSE.txt */
"use strict";(self.webpackChunkbackstage_microsite=self.webpackChunkbackstage_microsite||[]).push([[13091],{65594:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var s=n(474848),r=n(28453);const o={id:"setup-opentelemetry",title:"Setup OpenTelemetry",description:"Tutorial to setup OpenTelemetry metrics and traces exporters in Backstage"},i=void 0,a={id:"tutorials/setup-opentelemetry",title:"Setup OpenTelemetry",description:"Tutorial to setup OpenTelemetry metrics and traces exporters in Backstage",source:"@site/../docs/tutorials/setup-opentelemetry.md",sourceDirName:"tutorials",slug:"/tutorials/setup-opentelemetry",permalink:"/docs/next/tutorials/setup-opentelemetry",draft:!1,unlisted:!1,editUrl:"https://github.com/backstage/backstage/edit/master/docs/tutorials/setup-opentelemetry.md",tags:[],version:"current",frontMatter:{id:"setup-opentelemetry",title:"Setup OpenTelemetry",description:"Tutorial to setup OpenTelemetry metrics and traces exporters in Backstage"},sidebar:"docs",previous:{title:"Enabling a public entry point",permalink:"/docs/next/tutorials/enable-public-entry"},next:{title:"Integrating Event-Driven Updates with Entity Providers",permalink:"/docs/next/tutorials/integrating-event-driven-updates-with-entity-providers"}},c={},l=[{value:"Install dependencies",id:"install-dependencies",level:2},{value:"Configure",id:"configure",level:2},{value:"Views",id:"views",level:3},{value:"Local Development Setup",id:"local-development-setup",level:2},{value:"Troubleshooting",id:"troubleshooting",level:3},{value:"Production Setup",id:"production-setup",level:2},{value:"Available Metrics",id:"available-metrics",level:3},{value:"References",id:"references",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["Backstage uses ",(0,s.jsx)(t.a,{href:"https://opentelemetry.io/",children:"OpenTelemetry"})," to instrument its components by reporting traces and metrics."]}),"\n",(0,s.jsxs)(t.p,{children:["This tutorial shows how to setup exporters in your Backstage backend package. For demonstration purposes we will use a Prometheus exporter, but you can adjust your solution to use another one that suits your needs; see for example the article on ",(0,s.jsx)(t.a,{href:"https://opentelemetry.io/docs/instrumentation/js/exporters/",children:"OTLP exporters"}),". This tutorial also includes exporting traces using the JSON/HTTP exporter with Jaeger being the ideal target, but this too can be adjusted to fit your needs by seeing the supported tooling in the ",(0,s.jsx)(t.a,{href:"https://opentelemetry.io/docs/instrumentation/js/exporters/",children:"OTLP exporters"})," documentation."]}),"\n",(0,s.jsx)(t.h2,{id:"install-dependencies",children:"Install dependencies"}),"\n",(0,s.jsxs)(t.p,{children:["We will use the OpenTelemetry Node SDK and the ",(0,s.jsx)(t.code,{children:"auto-instrumentations-node"})," packages."]}),"\n",(0,s.jsxs)(t.p,{children:["Backstage packages, such as the catalog, use the OpenTelemetry API to send custom traces and metrics.\nThe ",(0,s.jsx)(t.code,{children:"auto-instrumentations-node"})," will automatically create spans for code called in libraries like Express."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"yarn --cwd packages/backend add \\\n    @opentelemetry/sdk-node \\\n    @opentelemetry/auto-instrumentations-node \\\n    @opentelemetry/exporter-prometheus \\\n    @opentelemetry/exporter-trace-otlp-http\n"})}),"\n",(0,s.jsx)(t.h2,{id:"configure",children:"Configure"}),"\n",(0,s.jsxs)(t.p,{children:["In your ",(0,s.jsx)(t.code,{children:"packages/backend/src"})," folder, create an ",(0,s.jsx)(t.code,{children:"instrumentation.js"})," file."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="in packages/backend/src/instrumentation.js"',children:"// Prevent from running more than once (due to worker threads)\nconst { isMainThread } = require('node:worker_threads');\n\nif (isMainThread) {\n  const { NodeSDK } = require('@opentelemetry/sdk-node');\n  const {\n    getNodeAutoInstrumentations,\n  } = require('@opentelemetry/auto-instrumentations-node');\n  const { PrometheusExporter } = require('@opentelemetry/exporter-prometheus');\n  const {\n    OTLPTraceExporter,\n  } = require('@opentelemetry/exporter-trace-otlp-http');\n\n  // By default exports the metrics on localhost:9464/metrics\n  const prometheusExporter = new PrometheusExporter();\n  // We post the traces to localhost:4318/v1/traces\n  const otlpTraceExporter = new OTLPTraceExporter({\n    // Default Jaeger URL trace endpoint.\n    url: 'http://localhost:4318/v1/traces',\n  });\n  const sdk = new NodeSDK({\n    metricReader: prometheusExporter,\n    traceExporter: otlpTraceExporter,\n    instrumentations: [getNodeAutoInstrumentations()],\n  });\n\n  sdk.start();\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["You probably won't need all of the instrumentation inside ",(0,s.jsx)(t.code,{children:"getNodeAutoInstrumentations()"})," so make sure to\ncheck the ",(0,s.jsx)(t.a,{href:"https://www.npmjs.com/package/@opentelemetry/auto-instrumentations-node",children:"documentation"})," and tweak it properly."]}),"\n",(0,s.jsx)(t.h3,{id:"views",children:"Views"}),"\n",(0,s.jsxs)(t.p,{children:["The default histogram buckets for OpenTelemetry are in milliseconds, but the histograms that are created for Catalog processing emit metrics in second. You might want to adjust this to what fits your need. To do this you can use the ",(0,s.jsx)(t.a,{href:"https://opentelemetry.io/docs/concepts/signals/metrics/#views",children:"Views feature"})," like this:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"const prometheus = new PrometheusExporter();\nconst sdk = new NodeSDK({\n  metricReader: prometheus,\n  views: [\n    new View({\n      instrumentName: 'catalog.test',\n      aggregation: new ExplicitBucketHistogramAggregation([\n        0.01, 0.1, 0.5, 1, 5, 10, 25, 50, 100, 500, 1000,\n      ]),\n    }),\n  ],\n});\n"})}),"\n",(0,s.jsx)(t.p,{children:"The above will make all the histogram buckets use the same config. If you would like to take a more targeted approach you can do this:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"const prometheus = new PrometheusExporter();\nconst sdk = new NodeSDK({\n  metricReader: prometheus,\n  views: [\n    new View({\n      instrumentName: 'catalog.test',\n      aggregation: new ExplicitBucketHistogramAggregation([\n        0, 0.01, 0.05, 0.1, 0.25, 0.5, 1, 2, 5, 10, 30, 60, 120, 300, 1000,\n      ]),\n    }),\n  ],\n});\n"})}),"\n",(0,s.jsx)(t.h2,{id:"local-development-setup",children:"Local Development Setup"}),"\n",(0,s.jsxs)(t.p,{children:["It's important to setup the NodeSDK and the automatic instrumentation ",(0,s.jsx)(t.strong,{children:"before"}),"\nimporting any library. This is why we will use the nodejs\n",(0,s.jsx)(t.a,{href:"https://nodejs.org/api/cli.html#-r---require-module",children:(0,s.jsx)(t.code,{children:"--require"})})," flag when we\nstart up the application."]}),"\n",(0,s.jsxs)(t.p,{children:["For local development, you can add the required flag in your ",(0,s.jsx)(t.code,{children:"packages/backend/package.json"}),"."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",metastring:'title="packages/backend/package.json"',children:'"scripts": {\n  "start": "backstage-cli package start --require ./src/instrumentation.js",\n  ...\n'})}),"\n",(0,s.jsxs)(t.p,{children:["You can now start your Backstage instance as usual, using ",(0,s.jsx)(t.code,{children:"yarn start"})," and you'll be able to see your metrics at: ",(0,s.jsx)(t.a,{href:"http://localhost:9464/metrics",children:"http://localhost:9464/metrics"})]}),"\n",(0,s.jsx)(t.h3,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(t.p,{children:"If you are having issues getting metrics or traces working there are some helpful diagnostic tools from OpenTelemetry you can use that can help."}),"\n",(0,s.jsxs)(t.p,{children:["First we need to the ",(0,s.jsx)(t.code,{children:"@opentelemetry/api"})," package:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"yarn --cwd packages/backend add @opentelemetry/api\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Then we want to add the following snippet before the ",(0,s.jsx)(t.code,{children:"sdk.start()"})," call:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"const { diag, DiagConsoleLogger, DiagLogLevel } = require('@opentelemetry/api');\n\ndiag.setLogger(new DiagConsoleLogger(), DiagLogLevel.DEBUG);\n"})}),"\n",(0,s.jsx)(t.p,{children:"This will then add OpenTelemetry debug logs that you can then look at to help get a better idea of why something may not be working as expected."}),"\n",(0,s.jsx)(t.p,{children:"We don't recommend shipping this in production because of the log density."}),"\n",(0,s.jsx)(t.h2,{id:"production-setup",children:"Production Setup"}),"\n",(0,s.jsxs)(t.p,{children:["In your ",(0,s.jsx)(t.code,{children:".dockerignore"}),", add this line:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-text",children:"!packages/backend/src/instrumentation.js\n"})}),"\n",(0,s.jsxs)(t.p,{children:["This ensures that Docker build will not ignore the instrumentation file if you are following the recommended ",(0,s.jsx)(t.code,{children:".dockerignore"})," setup."]}),"\n",(0,s.jsxs)(t.p,{children:["In your ",(0,s.jsx)(t.code,{children:"Dockerfile"}),", copy ",(0,s.jsx)(t.code,{children:"instrumentation.js"})," file into the root of the working directory."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-Dockerfile",children:"COPY --chown=${NOT_ROOT_USER}:${NOT_ROOT_USER} packages/backend/src/instrumentation.js ./\n"})}),"\n",(0,s.jsxs)(t.p,{children:["And then add the ",(0,s.jsx)(t.code,{children:"--require"})," flag that points to the file to the CMD array."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-Dockerfile",children:'// highlight-remove-next-line\nCMD ["node", "packages/backend", "--config", "app-config.yaml"]\n// highlight-add-next-line\nCMD ["node", "--require", "./instrumentation.js", "packages/backend", "--config", "app-config.yaml"]\n'})}),"\n",(0,s.jsxs)(t.p,{children:["If you need to disable/configure some OpenTelemetry feature there are lots of ",(0,s.jsx)(t.a,{href:"https://opentelemetry.io/docs/specs/otel/configuration/sdk-environment-variables/",children:"environment variables"})," which you can tweak."]}),"\n",(0,s.jsx)(t.h3,{id:"available-metrics",children:"Available Metrics"}),"\n",(0,s.jsx)(t.p,{children:"The following metrics are available:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"catalog_entities_count"}),": Total amount of entities in the catalog"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"catalog_registered_locations_count"}),": Total amount of registered locations in the catalog"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"catalog_relations_count"}),": Total amount of relations between entities"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"catalog.processed.entities.count"}),": Amount of entities processed"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"catalog.processing.duration"}),": Time spent executing the full processing flow"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"catalog.processors.duration"}),": Time spent executing catalog processors"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"catalog.processing.queue.delay"}),": The amount of delay between being scheduled for processing, and the start of actually being processed"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"catalog.stitched.entities.count"}),": Amount of entities stitched"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"catalog.stitching.duration"}),": Time spent executing the full stitching flow"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"catalog.stitching.queue.length"}),": Number of entities currently in the stitching queue"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"catalog.stitching.queue.delay"}),": The amount of delay between being scheduled for stitching, and the start of actually being stitched"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"scaffolder.task.count"}),": Count of task runs"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"scaffolder.task.duration"}),": Duration of a task run"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"scaffolder.step.count"}),": Count of step runs"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"scaffolder.step.duration"}),": Duration of a step runs"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"backend_tasks.task.runs.count"}),": Total number of times a task has been run"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"backend_tasks.task.runs.duration"}),": Histogram of task run durations"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"references",children:"References"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://opentelemetry.io/docs/instrumentation/js/getting-started/nodejs/",children:"Getting started with OpenTelemetry Node.js"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://open-telemetry.github.io/opentelemetry-js/classes/_opentelemetry_sdk_node.NodeSDK.html",children:"OpenTelemetry NodeSDK API"})}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},221020:(e,t,n)=>{var s=n(296540),r=Symbol.for("react.element"),o=Symbol.for("react.fragment"),i=Object.prototype.hasOwnProperty,a=s.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,c={key:!0,ref:!0,__self:!0,__source:!0};function l(e,t,n){var s,o={},l=null,d=null;for(s in void 0!==n&&(l=""+n),void 0!==t.key&&(l=""+t.key),void 0!==t.ref&&(d=t.ref),t)i.call(t,s)&&!c.hasOwnProperty(s)&&(o[s]=t[s]);if(e&&e.defaultProps)for(s in t=e.defaultProps)void 0===o[s]&&(o[s]=t[s]);return{$$typeof:r,type:e,key:l,ref:d,props:o,_owner:a.current}}t.Fragment=o,t.jsx=l,t.jsxs=l},474848:(e,t,n)=>{e.exports=n(221020)},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var s=n(296540);const r={},o=s.createContext(r);function i(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);