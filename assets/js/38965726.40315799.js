/*! For license information please see 38965726.40315799.js.LICENSE.txt */
"use strict";(self.webpackChunkbackstage_microsite=self.webpackChunkbackstage_microsite||[]).push([[522591],{421731:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>c});var s=n(474848),i=n(28453);const a={id:"writing-templates",title:"Writing Templates",description:"Details around creating your own custom Software Templates"},o=void 0,r={id:"features/software-templates/writing-templates",title:"Writing Templates",description:"Details around creating your own custom Software Templates",source:"@site/../docs/features/software-templates/writing-templates.md",sourceDirName:"features/software-templates",slug:"/features/software-templates/writing-templates",permalink:"/docs/next/features/software-templates/writing-templates",draft:!1,unlisted:!1,editUrl:"https://github.com/backstage/backstage/edit/master/docs/features/software-templates/writing-templates.md",tags:[],version:"current",frontMatter:{id:"writing-templates",title:"Writing Templates",description:"Details around creating your own custom Software Templates"},sidebar:"docs",previous:{title:"Adding your own Templates",permalink:"/docs/next/features/software-templates/adding-templates"},next:{title:"Input Examples",permalink:"/docs/next/features/software-templates/input-examples"}},l={},c=[{value:"<code>spec.parameters</code> - <code>FormStep | FormStep[]</code>",id:"specparameters---formstep--formstep",level:2},{value:"Using Secrets",id:"using-secrets",level:3},{value:"Custom step layouts",id:"custom-step-layouts",level:3},{value:"Remove sections or fields based on feature flags",id:"remove-sections-or-fields-based-on-feature-flags",level:3},{value:"The Repository Picker",id:"the-repository-picker",level:3},{value:"Using the Users <code>oauth</code> token",id:"using-the-users-oauth-token",level:4},{value:"The Repository Branch Picker",id:"the-repository-branch-picker",level:3},{value:"Accessing the signed-in users details",id:"accessing-the-signed-in-users-details",level:3},{value:"The Owner Picker",id:"the-owner-picker",level:3},{value:"<code>catalogFilter</code>",id:"catalogfilter",level:4},{value:"Custom validation messages",id:"custom-validation-messages",level:3},{value:"<code>spec.steps</code> - <code>Action[]</code>",id:"specsteps---action",level:2},{value:"Outputs",id:"outputs",level:2},{value:"The templating syntax",id:"the-templating-syntax",level:2},{value:"More about expressions",id:"more-about-expressions",level:3},{value:"Template Editor",id:"template-editor",level:2},{value:"Load Template Directory",id:"load-template-directory",level:3},{value:"Edit Template Form",id:"edit-template-form",level:3},{value:"Custom Field Explorer",id:"custom-field-explorer",level:3},{value:"Presentation",id:"presentation",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["You can create your own templates with a small ",(0,s.jsx)(t.code,{children:"yaml"})," definition which describes the\ntemplate and its metadata, along with some input variables that your template\nwill need, and then a list of actions which are then executed by the scaffolding\nservice."]}),"\n",(0,s.jsx)(t.p,{children:"Let's take a look at a simple example:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"# Notice the v1beta3 version\napiVersion: scaffolder.backstage.io/v1beta3\nkind: Template\n# some metadata about the template itself\nmetadata:\n  name: v1beta3-demo\n  title: Test Action template\n  description: scaffolder v1beta3 template demo\nspec:\n  owner: backstage/techdocs-core\n  type: service\n\n  # these are the steps which are rendered in the frontend with the form input\n  parameters:\n    - title: Fill in some steps\n      required:\n        - name\n      properties:\n        name:\n          title: Name\n          type: string\n          description: Unique name of the component\n          ui:autofocus: true\n          ui:options:\n            rows: 5\n        owner:\n          title: Owner\n          type: string\n          description: Owner of the component\n          ui:field: OwnerPicker\n          ui:options:\n            catalogFilter:\n              kind: Group\n    - title: Choose a location\n      required:\n        - repoUrl\n      properties:\n        repoUrl:\n          title: Repository Location\n          type: string\n          ui:field: RepoUrlPicker\n          ui:options:\n            allowedHosts:\n              - github.com\n\n  # here's the steps that are executed in series in the scaffolder backend\n  steps:\n    - id: fetchBase\n      name: Fetch Base\n      action: fetch:template\n      input:\n        url: ./template\n        values:\n          name: ${{ parameters.name }}\n          owner: ${{ parameters.owner }}\n\n    - id: fetchDocs\n      name: Fetch Docs\n      action: fetch:plain\n      input:\n        targetPath: ./community\n        url: https://github.com/backstage/community/tree/main/backstage-community-sessions\n\n    - id: publish\n      name: Publish\n      action: publish:github\n      input:\n        description: This is ${{ parameters.name }}\n        repoUrl: ${{ parameters.repoUrl }}\n        defaultBranch: 'main'\n\n    - id: register\n      name: Register\n      action: catalog:register\n      input:\n        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}\n        catalogInfoPath: '/catalog-info.yaml'\n\n  # some outputs which are saved along with the job for use in the frontend\n  output:\n    links:\n      - title: Repository\n        url: ${{ steps['publish'].output.remoteUrl }}\n      - title: Open in catalog\n        icon: catalog\n        entityRef: ${{ steps['register'].output.entityRef }}\n"})}),"\n",(0,s.jsx)(t.p,{children:"Let's dive in and pick apart what each of these sections do and what they are."}),"\n",(0,s.jsxs)(t.h2,{id:"specparameters---formstep--formstep",children:[(0,s.jsx)(t.code,{children:"spec.parameters"})," - ",(0,s.jsx)(t.code,{children:"FormStep | FormStep[]"})]}),"\n",(0,s.jsxs)(t.p,{children:["These ",(0,s.jsx)(t.code,{children:"parameters"})," are template variables which can be modified in the frontend\nas a sequence. It can either be one ",(0,s.jsx)(t.code,{children:"Step"})," if you just want one big list of\ndifferent fields in the frontend, or it can be broken up into multiple different\nsteps which would be rendered as different steps in the scaffolder plugin\nfrontend."]}),"\n",(0,s.jsxs)(t.p,{children:["Each ",(0,s.jsx)(t.code,{children:"Step"})," is ",(0,s.jsx)(t.code,{children:"JSONSchema"})," with some extra goodies for styling what it might\nlook like in the frontend. For these steps we rely very heavily on this\n",(0,s.jsx)(t.a,{href:"https://github.com/rjsf-team/react-jsonschema-form",children:"library"}),". They have some\n",(0,s.jsx)(t.a,{href:"https://rjsf-team.github.io/react-jsonschema-form/docs/",children:"great docs"})," and a\n",(0,s.jsx)(t.a,{href:"https://rjsf-team.github.io/react-jsonschema-form",children:"playground"})," where you can\nplay around with some examples."]}),"\n",(0,s.jsxs)(t.p,{children:["There's another option for that library called ",(0,s.jsx)(t.code,{children:"uiSchema"})," which we've taken\nadvantage of, and we've merged it with the existing ",(0,s.jsx)(t.code,{children:"JSONSchema"})," that you\nprovide to the library. These are the little ",(0,s.jsx)(t.code,{children:"ui:*"})," properties that you can see\nin the step definitions."]}),"\n",(0,s.jsxs)(t.p,{children:["For example if we take the ",(0,s.jsx)(t.strong,{children:"simple"})," example from the playground it looks like\nthis:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'// jsonSchema:\n{\n  "title": "A registration form",\n  "description": "A simple form example.",\n  "type": "object",\n  "required": [\n    "firstName",\n    "lastName"\n  ],\n  "properties": {\n    "firstName": {\n      "type": "string",\n      "title": "First name",\n      "default": "Chuck"\n    },\n    "lastName": {\n      "type": "string",\n      "title": "Last name"\n    },\n    "nicknames":{\n      "type": "array",\n      "items": {\n        "type": "string"\n      }\n    },\n    "telephone": {\n      "type": "string",\n      "title": "Telephone",\n      "minLength": 10\n    }\n  }\n}\n\n// uiSchema:\n{\n  "firstName": {\n    "ui:autofocus": true,\n    "ui:emptyValue": "",\n    "ui:autocomplete": "given-name"\n  },\n  "lastName": {\n    "ui:emptyValue": "",\n    "ui:autocomplete": "family-name"\n  },\n  "nicknames": {\n    "ui:options":{\n      "orderable": false\n    }\n  },\n  "telephone": {\n    "ui:options": {\n      "inputType": "tel"\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:"It would look something like the following in a template:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"apiVersion: scaffolder.backstage.io/v1beta3\nkind: Template\nmetadata:\n  name: v1beta3-demo\n  title: Test Action template\n  description: scaffolder v1beta3 template demo\nspec:\n  owner: backstage/techdocs-core\n  type: service\n\n  parameters:\n    - title: A registration form\n      description: A simple form example.\n      type: object\n      required:\n        - firstName\n        - lastName\n      properties:\n        firstName:\n          type: string\n          title: First name\n          default: Chuck\n          ui:autofocus: true\n          ui:emptyValue: ''\n          ui:autocomplete: given-name\n        lastName:\n          type: string\n          title: Last name\n          ui:emptyValue: ''\n          ui:autocomplete: family-name\n        nicknames:\n          type: array\n          items:\n            type: string\n          ui:options:\n            orderable: false\n        telephone:\n          type: string\n          title: Telephone\n          minLength: 10\n          ui:options:\n            inputType: tel\n"})}),"\n",(0,s.jsx)(t.h3,{id:"using-secrets",children:"Using Secrets"}),"\n",(0,s.jsxs)(t.p,{children:["You may want to mark things as secret and make sure that these values are protected and not available through REST endpoints. You can do this by using the built in ",(0,s.jsx)(t.code,{children:"ui:field: Secret"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["You can define this property as any normal parameter, however the consumption of this parameter will not be available through ",(0,s.jsx)(t.code,{children:"${{ parameters.myKey }}"})," you will instead need to use ",(0,s.jsx)(t.code,{children:"${{ secrets.myKey }}"})," in your ",(0,s.jsx)(t.code,{children:"template.yaml"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"Parameters will be automatically masked in the review step."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"apiVersion: scaffolder.backstage.io/v1beta3\nkind: Template\nmetadata:\n  name: v1beta3-demo\n  title: Test Action template\n  description: scaffolder v1beta3 template demo\nspec:\n  owner: backstage/techdocs-core\n  type: service\n\n  parameters:\n    - title: Authentication\n      description: Provide authentication for the resource\n      required:\n        - username\n        - password\n      properties:\n        username:\n          type: string\n          # use the built in Secret field extension\n          ui:field: Secret\n        password:\n          type: string\n          ui:field: Secret\n\n  steps:\n    - id: setupAuthentication\n      action: auth:create\n      input:\n        # make sure to use ${{ secrets.parameterName }} to reference these values\n        username: ${{ secrets.username }}\n        password: ${{ secrets.password }}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["You can also consume secrets within ",(0,s.jsx)(t.code,{children:"each"})," step of the template."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"apiVersion: scaffolder.backstage.io/v1beta3\nkind: Template\nmetadata:\n  name: v1beta3-demo\n  title: Test Action template\n  description: scaffolder v1beta3 template demo\nspec:\n  owner: backstage/techdocs-core\n  type: service\n\n  parameters:\n    - title: Authentication\n      description: Provide authentication for the resource\n      required:\n        - service1\n        - token1\n        - service2\n        - token2\n      properties:\n        service1:\n          type: string\n        token1:\n          type: string\n          ui:field: Secret\n        service2:\n          type: string\n        token2:\n          type: string\n          ui:field: Secret\n\n  steps:\n    - id: setupAuthentication\n      action: auth:create\n      each:\n        [\n          {\n            name: '${{ parameters.service1 }}',\n            token: '${{ secrets.token1 }}',\n          },\n          {\n            name: '${{ parameters.service2 }}',\n            token: '${{ secrets.token2 }}',\n          },\n        ]\n      input:\n        name: ${{ each.value.name }}\n        token: ${{ each.value.token }}\n"})}),"\n",(0,s.jsx)(t.h3,{id:"custom-step-layouts",children:"Custom step layouts"}),"\n",(0,s.jsxs)(t.p,{children:["If you find that the default layout of the form used in a particular step does not meet your needs then you can supply your own ",(0,s.jsx)(t.a,{href:"/docs/next/features/software-templates/writing-custom-step-layouts",children:"custom step layout"}),"."]}),"\n",(0,s.jsx)(t.h3,{id:"remove-sections-or-fields-based-on-feature-flags",children:"Remove sections or fields based on feature flags"}),"\n",(0,s.jsx)(t.p,{children:"Based on feature flags you can hide sections or even only fields of your\ntemplate. This is a good use case if you want to test experimental parameters in\na production environment. To use it let's look at the following template:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"spec:\n  type: website\n  owner: team-a\n  parameters:\n    - name: Enter some stuff\n      description: Enter some stuff\n      backstage:featureFlag: experimental-feature\n      properties:\n        inputString:\n          type: string\n          title: string input test\n        inputObject:\n          type: object\n          title: object input test\n          description: a little nested thing never hurt anyone right?\n          properties:\n            first:\n              type: string\n              title: first\n              backstage:featureFlag: nested-experimental-feature\n            second:\n              type: number\n              title: second\n"})}),"\n",(0,s.jsxs)(t.p,{children:["If you have a feature flag ",(0,s.jsx)(t.code,{children:"experimental-feature"})," active then\nyour first set of parameter fields would be shown. The same goes for the nested properties in the\nspec. Make sure to use the key ",(0,s.jsx)(t.code,{children:"backstage:featureFlag"})," in your templates if\nyou want to use this functionality."]}),"\n",(0,s.jsxs)(t.p,{children:["Feature Flags cannot be used in ",(0,s.jsx)(t.code,{children:"spec.steps[].if"}),"(the conditional on whether to execute a step/action). But you can use feature flags to display parameters that allow for skipping steps."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"spec:\n  type: website\n  owner: team-a\n  parameters:\n    - name: Enter some stuff\n      description: Enter some stuff\n      backstage:featureFlag: experimental-feature\n      properties:\n        skipStep:\n          type: boolean\n          title: Whether or not to skip a step.\n          default: false\n        restOfParameters:\n          ...\n  steps:\n    - id: skipMe\n      name: A step to skip if the feature flag is turned on and the user selects true\n      action: debug:log\n      if: ${{ parameters.skipStep }}\n      input:\n        message: |\n        ...\n"})}),"\n",(0,s.jsx)(t.h3,{id:"the-repository-picker",children:"The Repository Picker"}),"\n",(0,s.jsxs)(t.p,{children:["In order to make working with repository providers easier, we've built a custom\npicker that can be used by overriding the ",(0,s.jsx)(t.code,{children:"ui:field"})," option in the ",(0,s.jsx)(t.code,{children:"uiSchema"}),"\nfor a ",(0,s.jsx)(t.code,{children:"string"})," field. Instead of displaying a text input block it will render\nour custom component that we've built which makes it easy to select a repository\nprovider, and insert a project or owner, and repository name."]}),"\n",(0,s.jsx)(t.p,{children:"You can see it in the above full example which is a separate step and it looks a\nlittle like this:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"- title: Choose a location\n  required:\n    - repoUrl\n  properties:\n    repoUrl:\n      title: Repository Location\n      type: string\n      ui:field: RepoUrlPicker\n      ui:options:\n        allowedHosts:\n          - github.com\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"allowedHosts"})," part should be set to where you wish to enable this template\nto publish to. And it can be any host that is listed in your ",(0,s.jsx)(t.code,{children:"integrations"}),"\nconfig in ",(0,s.jsx)(t.code,{children:"app-config.yaml"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["Besides specifying ",(0,s.jsx)(t.code,{children:"allowedHosts"})," you can also restrict the template to publish to\nrepositories owned by specific users/groups/namespaces by setting the ",(0,s.jsx)(t.code,{children:"allowedOwners"}),"\noption. With the ",(0,s.jsx)(t.code,{children:"allowedRepos"})," option you are able to narrow it down further to a\nspecific set of repository names. A full example could look like this:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"- title: Choose a location\n  required:\n    - repoUrl\n  properties:\n    repoUrl:\n      title: Repository Location\n      type: string\n      ui:field: RepoUrlPicker\n      ui:options:\n        allowedHosts:\n          - github.com\n        allowedOwners:\n          - backstage\n          - someGithubUser\n        allowedRepos:\n          - backstage\n"})}),"\n",(0,s.jsxs)(t.p,{children:["For a list of all possible ",(0,s.jsx)(t.code,{children:"ui:options"})," input props for ",(0,s.jsx)(t.code,{children:"RepoUrlPicker"}),", please visit ",(0,s.jsx)(t.a,{href:"/docs/next/features/software-templates/ui-options-examples#repourlpicker",children:"here"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"RepoUrlPicker"})," is a custom field that we provide part of the\n",(0,s.jsx)(t.code,{children:"plugin-scaffolder"}),". You can provide your own custom fields by\n",(0,s.jsx)(t.a,{href:"/docs/next/features/software-templates/writing-custom-field-extensions",children:"writing your own Custom Field Extensions"})]}),"\n",(0,s.jsxs)(t.h4,{id:"using-the-users-oauth-token",children:["Using the Users ",(0,s.jsx)(t.code,{children:"oauth"})," token"]}),"\n",(0,s.jsxs)(t.p,{children:["There's a little bit of extra magic that you get out of the box when using the\n",(0,s.jsx)(t.code,{children:"RepoUrlPicker"})," as a field input. You can provide some additional options under\n",(0,s.jsx)(t.code,{children:"ui:options"})," to allow the ",(0,s.jsx)(t.code,{children:"RepoUrlPicker"})," to grab an ",(0,s.jsx)(t.code,{children:"oauth"})," token for the user\nfor the required ",(0,s.jsx)(t.code,{children:"repository"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"This is great for when you are wanting to create a new repository, or wanting to\nperform operations on top of an existing repository."}),"\n",(0,s.jsx)(t.p,{children:"A sample template that takes advantage of this is like so:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"apiVersion: scaffolder.backstage.io/v1beta3\nkind: Template\nmetadata:\n  name: v1beta3-demo\n  title: Test Action template\n  description: scaffolder v1beta3 template demo\nspec:\n  owner: backstage/techdocs-core\n  type: service\n\n  parameters:\n    ...\n\n    - title: Choose a location\n      required:\n        - repoUrl\n      properties:\n        repoUrl:\n          title: Repository Location\n          type: string\n          ui:field: RepoUrlPicker\n          ui:options:\n            # Here's the option you can pass to the RepoUrlPicker\n            requestUserCredentials:\n              secretsKey: USER_OAUTH_TOKEN\n              additionalScopes:\n                github:\n                  - workflow\n            allowedHosts:\n              - github.com\n    ...\n\n  steps:\n    ...\n\n    - id: publish\n      name: Publish\n      action: publish:github\n      input:\n        description: This is ${{ parameters.name }}\n        repoUrl: ${{ parameters.repoUrl }}\n        # here's where the secret can be used\n        token: ${{ secrets.USER_OAUTH_TOKEN }}\n\n    ...\n"})}),"\n",(0,s.jsxs)(t.p,{children:["You will see from above that there is an additional ",(0,s.jsx)(t.code,{children:"requestUserCredentials"}),"\nobject that is passed to the ",(0,s.jsx)(t.code,{children:"RepoUrlPicker"}),". This object defines what the\nreturned ",(0,s.jsx)(t.code,{children:"secret"})," should be stored as when accessing using\n",(0,s.jsx)(t.code,{children:"${{ secrets.secretName }}"}),", in this case it is ",(0,s.jsx)(t.code,{children:"USER_OAUTH_TOKEN"}),". And then you\nwill see that there is an additional ",(0,s.jsx)(t.code,{children:"input"})," field into the ",(0,s.jsx)(t.code,{children:"publish:github"}),"\naction called ",(0,s.jsx)(t.code,{children:"token"}),", in which you can use the ",(0,s.jsx)(t.code,{children:"secret"})," like so:\n",(0,s.jsx)(t.code,{children:"token: ${{ secrets.USER_OAUTH_TOKEN }}"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["There's also the ability to pass additional scopes when requesting the ",(0,s.jsx)(t.code,{children:"oauth"}),"\ntoken from the user, which you can do on a per-provider basis, in case your\ntemplate can be published to multiple providers."]}),"\n",(0,s.jsxs)(t.p,{children:["Note, that you will need to configure an ",(0,s.jsx)(t.a,{href:"/docs/next/auth/#configuring-authentication-providers",children:"authentication provider"}),", alongside the\n",(0,s.jsx)(t.a,{href:"/docs/next/auth/#scaffolder-configuration-software-templates",children:(0,s.jsx)(t.code,{children:"ScmAuthApi"})})," for your source code management (SCM) service to make this feature work."]}),"\n",(0,s.jsx)(t.h3,{id:"the-repository-branch-picker",children:"The Repository Branch Picker"}),"\n",(0,s.jsx)(t.p,{children:"Similar to the repository picker, there is a picker for branches to support autocompletion. A full example could look like this:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"- title: Choose a branch\n  required:\n    - repoBranch\n  properties:\n    repoBranch:\n      title: Repository Branch\n      type: string\n      ui:field: RepoBranchPicker\n      ui:options:\n        requestUserCredentials:\n          secretsKey: USER_OAUTH_TOKEN\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Passing the ",(0,s.jsx)(t.code,{children:"requestUserCredentials"})," object is required for autocompletion to work.\nIf you're also using the repository picker, you should simply duplicate this part from there.\nFor more information regarding the ",(0,s.jsx)(t.code,{children:"requestUserCredentials"})," object, please refer to the ",(0,s.jsxs)(t.a,{href:"#using-the-users-oauth-token",children:["Using the Users ",(0,s.jsx)(t.code,{children:"oauth"})," token"]})," section under ",(0,s.jsx)(t.a,{href:"#the-repository-picker",children:"The Repository Picker"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["For a list of all possible ",(0,s.jsx)(t.code,{children:"ui:options"})," input props for ",(0,s.jsx)(t.code,{children:"RepoBranchPicker"}),", please visit ",(0,s.jsx)(t.a,{href:"/docs/next/features/software-templates/ui-options-examples#repobranchpicker",children:"here"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"RepoBranchPicker"})," is a custom field that we provide part of the\n",(0,s.jsx)(t.code,{children:"plugin-scaffolder"}),". You can provide your own custom fields by\n",(0,s.jsx)(t.a,{href:"/docs/next/features/software-templates/writing-custom-field-extensions",children:"writing your own Custom Field Extensions"})]}),"\n",(0,s.jsx)(t.h3,{id:"accessing-the-signed-in-users-details",children:"Accessing the signed-in users details"}),"\n",(0,s.jsxs)(t.p,{children:["Sometimes when authoring templates, you'll want to access the user that is running the template, and get details from the profile or the users ",(0,s.jsx)(t.code,{children:"Entity"})," in the Catalog."]}),"\n",(0,s.jsxs)(t.p,{children:["If you have enabled a sign in provider and have a ",(0,s.jsx)(t.a,{href:"/docs/next/auth/identity-resolver",children:"sign in resolver"})," that points to a user in the Catalog, then you can use the ",(0,s.jsx)(t.code,{children:"${{ user.entity }}"})," templating expression to access the raw entity from the Catalog."]}),"\n",(0,s.jsxs)(t.p,{children:["This can be particularly useful if you have processors setup in the Catalog to write ",(0,s.jsx)(t.code,{children:"spec.profile.email"})," of the ",(0,s.jsx)(t.code,{children:"User Entities"})," to reference them and pass them into actions like below:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"  steps:\n    action: publish:github\n    ...\n    input:\n        ...\n        gitAuthorName: ${{ user.entity.metadata.name }}\n        gitAuthorEmail: ${{ user.entity.spec.profile.email }}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["You also have access to ",(0,s.jsx)(t.code,{children:"user.entity.metadata.annotations"})," too, so if you have some other additional information stored in there, you reference those too."]}),"\n",(0,s.jsx)(t.h3,{id:"the-owner-picker",children:"The Owner Picker"}),"\n",(0,s.jsxs)(t.p,{children:["When the scaffolder needs to add new components to the catalog, it needs to have\nan owner for them. Ideally, users should be able to select an owner when they go\nthrough the scaffolder form from the users and groups already known to\nBackstage. The ",(0,s.jsx)(t.code,{children:"OwnerPicker"})," is a custom field that generates a searchable list\nof groups and/or users already in the catalog to pick an owner from. You can\nspecify which of the two kinds (or both) are listed in the ",(0,s.jsx)(t.code,{children:"catalogFilter.kind"})," option:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"owner:\n  title: Owner\n  type: string\n  description: Owner of the component\n  ui:field: OwnerPicker\n  ui:options:\n    catalogFilter:\n      kind: [Group, User]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["For a list of all possible ",(0,s.jsx)(t.code,{children:"ui:options"})," input props for ",(0,s.jsx)(t.code,{children:"OwnerPicker"}),", please visit ",(0,s.jsx)(t.a,{href:"/docs/next/features/software-templates/ui-options-examples#ownerpicker",children:"here"}),"."]}),"\n",(0,s.jsx)(t.h4,{id:"catalogfilter",children:(0,s.jsx)(t.code,{children:"catalogFilter"})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"catalogFilter"})," allow you to filter the list entities using any of the ",(0,s.jsx)(t.a,{href:"https://backstage.io/docs/features/software-catalog/software-catalog-api#filtering",children:"catalog api filters"}),":"]}),"\n",(0,s.jsxs)(t.p,{children:["For example, if you want to show users in the ",(0,s.jsx)(t.code,{children:"default"})," namespace, and groups with the ",(0,s.jsx)(t.code,{children:"github.com/team-slug"})," annotation, you can do the following:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"catalogFilter:\n  - kind: [User]\n    metadata.namespace: default\n  - kind: [Group]\n    metadata.annotations.github.com/team-slug: { exists: true }\n"})}),"\n",(0,s.jsx)(t.h3,{id:"custom-validation-messages",children:"Custom validation messages"}),"\n",(0,s.jsxs)(t.p,{children:["You may specify custom JSON Schema validation messages as supported by the\n",(0,s.jsx)(t.a,{href:"https://github.com/ajv-validator/ajv-errors",children:"ajv-errors"})," plugin library to ",(0,s.jsx)(t.a,{href:"https://github.com/ajv-validator/ajv",children:"ajv"}),"."]}),"\n",(0,s.jsxs)(t.h2,{id:"specsteps---action",children:[(0,s.jsx)(t.code,{children:"spec.steps"})," - ",(0,s.jsx)(t.code,{children:"Action[]"})]}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"steps"})," is an array of the things that you want to happen part of this\ntemplate. These follow the same standard format:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"- id: fetchBase # A unique id for the step\n  name: Fetch Base # A title displayed in the frontend\n  if: ${{ parameters.name }} # Optional condition, skip the step if not truthy\n  each: ${{ parameters.iterable }} # Optional iterable, run the same step multiple times\n  action: fetch:template # An action to call\n  input: # Input that is passed as arguments to the action handler\n    url: ./template\n    values:\n      name: ${{ parameters.name }}\n"})}),"\n",(0,s.jsxs)(t.admonition,{title:"Action ID Naming",type:"warning",children:[(0,s.jsxs)(t.p,{children:["When using custom actions, ",(0,s.jsx)(t.strong,{children:"use camelCase for action IDs"})," to avoid issues with template expressions. Action IDs with dashes will cause expressions like ",(0,s.jsx)(t.code,{children:"${{ steps.my-action.output.value }}"})," to return ",(0,s.jsx)(t.code,{children:"NaN"})," instead of the expected value."]}),(0,s.jsxs)(t.p,{children:["Use ",(0,s.jsx)(t.code,{children:"myAction"})," instead of ",(0,s.jsx)(t.code,{children:"my-action"}),", or access outputs with bracket notation: ",(0,s.jsx)(t.code,{children:"${{ steps['my-action'].output.value }}"}),"."]})]}),"\n",(0,s.jsxs)(t.p,{children:["By default we ship some ",(0,s.jsx)(t.a,{href:"/docs/next/features/software-templates/builtin-actions",children:"built in actions"})," that you can\ntake a look at, or you can\n",(0,s.jsx)(t.a,{href:"/docs/next/features/software-templates/writing-custom-actions",children:"create your own custom actions"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["When ",(0,s.jsx)(t.code,{children:"each"})," is provided, the current iteration value is available in the ",(0,s.jsx)(t.code,{children:"${{ each }}"})," input."]}),"\n",(0,s.jsx)(t.p,{children:"Examples:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"each: ['apples', 'oranges']\ninput:\n  values:\n    fruit: ${{ each.value }}\n"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"each: [{ name: 'apple', count: 3 }, { name: 'orange', count: 1 }]\ninput:\n  values:\n    fruit: ${{ each.value.name }}\n    count: ${{ each.value.count }}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["When ",(0,s.jsx)(t.code,{children:"each"})," is used, the outputs of a repeated step are returned as an array of outputs from each iteration."]}),"\n",(0,s.jsx)(t.h2,{id:"outputs",children:"Outputs"}),"\n",(0,s.jsx)(t.p,{children:"Each individual step can output some variables that can be used in the\nscaffolder frontend for after the job is finished. This is useful for things\nlike linking to the entity that has been created with the backend, linking\nto the created repository, or showing Markdown text blobs."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"output:\n  links:\n    - title: Repository\n      url: ${{ steps['publish'].output.remoteUrl }} # link to the remote repository\n    - title: Open in catalog\n      icon: catalog\n      entityRef: ${{ steps['register'].output.entityRef }} # link to the entity that has been ingested to the catalog\n  text:\n    - title: More information\n      content: |\n        **Entity URL:** `${{ steps['publish'].output.remoteUrl }}`\n"})}),"\n",(0,s.jsx)(t.h2,{id:"the-templating-syntax",children:"The templating syntax"}),"\n",(0,s.jsxs)(t.p,{children:["You might have noticed expressions wrapped in ",(0,s.jsx)(t.code,{children:"${{ }}"})," in the examples. These are\ntemplate strings for linking and gluing the different parts of the template\ntogether. All the form inputs from the ",(0,s.jsx)(t.code,{children:"parameters"})," section will be available by\nusing this template syntax (for example, ",(0,s.jsx)(t.code,{children:"${{ parameters.firstName }}"})," inserts\nthe value of ",(0,s.jsx)(t.code,{children:"firstName"})," from the parameters). This is great for passing the\nvalues from the form into different steps and reusing these input variables.\nThese template strings preserve the type of the parameter."]}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"${{ parameters.firstName }}"})," pattern will work only in the template file.\nIf you want to start using values provided from the UI in your code, you will have to use\nthe ",(0,s.jsx)(t.code,{children:"${{ values.firstName }}"})," pattern. Additionally, you have to pass\nthe parameters from the UI to the input of the ",(0,s.jsx)(t.code,{children:"fetch:template"})," step."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"apiVersion: scaffolder.backstage.io/v1beta3\nkind: Template\nmetadata:\n  name: v1beta3-demo\n  title: Test Action\n  description: scaffolder v1beta3 template demo\nspec:\n  owner: backstage/techdocs-core\n  type: service\n  parameters:\n    - title: Fill in some steps\n      required:\n        - name\n      properties:\n        name:\n          title: Name\n          type: string\n          description: Unique name of your project\n        urlParameter:\n          title: URL endpoint\n          type: string\n          description: URL endpoint at which the component can be reached\n          default: 'https://www.example.com'\n        enabledDB:\n          title: Enable Database\n          type: boolean\n          default: false\n  ...\n  steps:\n    - id: fetchBase\n      name: Fetch Base\n      action: fetch:template\n      input:\n        url: ./template\n        values:\n          name: ${{ parameters.name }}\n          url: ${{ parameters.urlParameter }}\n          enabledDB: ${{ parameters.enabledDB }}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Afterwards, if you are using the builtin templating action, you can start using\nthe variables in your code. You can use also any other templating functions from\n",(0,s.jsx)(t.a,{href:"https://mozilla.github.io/nunjucks/templating.html#tags",children:"Nunjucks"})," as well."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:'#!/bin/bash\necho "Hi my name is ${{ values.name }}, and you can fine me at ${{ values.url }}!"\n{% if values.enabledDB %}\necho "You have enabled your database!"\n{% endif %}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["As you can see above in the ",(0,s.jsx)(t.code,{children:"Outputs"})," section, ",(0,s.jsx)(t.code,{children:"actions"})," and ",(0,s.jsx)(t.code,{children:"steps"})," can also\noutput things. You can grab that output using ",(0,s.jsx)(t.code,{children:"steps.$stepId.output.$property"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["You can read more about all the ",(0,s.jsx)(t.code,{children:"inputs"})," and ",(0,s.jsx)(t.code,{children:"outputs"})," defined in the actions in\ncode part of the ",(0,s.jsx)(t.code,{children:"JSONSchema"}),", or you can read more about our\n",(0,s.jsx)(t.a,{href:"/docs/next/features/software-templates/builtin-actions",children:"built in actions"}),"."]}),"\n",(0,s.jsx)(t.h3,{id:"more-about-expressions",children:"More about expressions"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"${{ }}"})," constructs in your template are evaluated using the\npowerful ",(0,s.jsx)(t.a,{href:"https://mozilla.github.io/nunjucks/",children:"Nunjucks templating engine"}),".\nTo learn more about basic Nunjucks templating please see\n",(0,s.jsx)(t.a,{href:"https://mozilla.github.io/nunjucks/templating.html",children:"templating documentation"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["Information about Backstage's built-in templating extensions, as well as how to\ncreate your own customizations, may be found at\n",(0,s.jsx)(t.a,{href:"/docs/next/features/software-templates/templating-extensions",children:"Templating Extensions"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"template-editor",children:"Template Editor"}),"\n",(0,s.jsx)(t.p,{children:"Writing template is most of the times an iterative process. You will need to test your template to make sure it has a good user experience and that it works as expected. To help on this process the scaffolder comes with a build in template editor that allows you to test your template in a real environment for querying data and execute the actions on dry-run mode to see the results of those one."}),"\n",(0,s.jsxs)(t.p,{children:['To access to the template editor you can go to the templates page and select "Template Editor" from the context menu or navigate to the ',(0,s.jsx)(t.code,{children:"{scaffolder-path}/edit"})," url. (i.e. the default route would be ",(0,s.jsx)(t.code,{children:"/create/edit"}),")"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Context menu",src:n(817323).A+"",width:"994",height:"466"})}),"\n",(0,s.jsx)(t.p,{children:"The template editor has 3 main sections:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Load Template Directory"}),": Load a local template directory, allowing you to both edit and try executing your own template."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Edit Template Form"}),": Preview and edit a template form, either using a sample template or by loading a template from the catalog."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Custom Field Explorer"}),": View and play around with available installed custom field extensions."]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"load-template-directory",children:"Load Template Directory"}),"\n",(0,s.jsx)(t.p,{children:"Allow to load a directory on your local file system that contains a template and editing the files in it while previewing the form and executing the template."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"template editor load dir",src:n(831283).A+"",width:"2990",height:"1488"})}),"\n",(0,s.jsxs)(t.p,{children:["If you complete the form in the right side and click on ",(0,s.jsx)(t.code,{children:"Create"})," button, the template will be executed in dry-run mode and the result will be shown in the ",(0,s.jsx)(t.code,{children:"Dry-run result"})," drawer that will pop-up at the bottom of the screen."]}),"\n",(0,s.jsx)(t.p,{children:"Here we could find all the file system results of the template execution as well as the logs of each action that was executed."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"dry run drawer example",src:n(496822).A+"",width:"2084",height:"542"})}),"\n",(0,s.jsx)(t.h3,{id:"edit-template-form",children:"Edit Template Form"}),"\n",(0,s.jsx)(t.p,{children:"This is a reduced version of the template editor that allows you to select any template from the catalog and do some modifications on the form presented to the user to test some changes."}),"\n",(0,s.jsx)(t.p,{children:"Have in mind that changes in this form will not be saved on the template and is meant to test out changes to replicate them manually on the template file after."}),"\n",(0,s.jsx)(t.h3,{id:"custom-field-explorer",children:"Custom Field Explorer"}),"\n",(0,s.jsx)(t.p,{children:"The custom field explorer allows you to select any custom field loaded on the backstage instance and test different values and configurations."}),"\n",(0,s.jsx)(t.h2,{id:"presentation",children:"Presentation"}),"\n",(0,s.jsxs)(t.p,{children:['You can configure the text of the "Back", "Review", and "Create" buttons using the ',(0,s.jsx)(t.code,{children:"spec.presentation"}),' field of your Software Template. You might want have a Template that doesn\'t "Create" something but rather "Updates" it. This feature will allow you to change it as needed. Here\'s an example of how to use this:']}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"---\nspec:\n  owner: scaffolder/maintainers\n  type: website\n  presentation:\n    buttonLabels:\n      backButtonText: 'Return'\n      createButtonText: 'Update'\n      reviewButtonText: 'Verify'\n"})})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},221020:(e,t,n)=>{var s=n(296540),i=Symbol.for("react.element"),a=Symbol.for("react.fragment"),o=Object.prototype.hasOwnProperty,r=s.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function c(e,t,n){var s,a={},c=null,d=null;for(s in void 0!==n&&(c=""+n),void 0!==t.key&&(c=""+t.key),void 0!==t.ref&&(d=t.ref),t)o.call(t,s)&&!l.hasOwnProperty(s)&&(a[s]=t[s]);if(e&&e.defaultProps)for(s in t=e.defaultProps)void 0===a[s]&&(a[s]=t[s]);return{$$typeof:i,type:e,key:c,ref:d,props:a,_owner:r.current}}t.Fragment=a,t.jsx=c,t.jsxs=c},474848:(e,t,n)=>{e.exports=n(221020)},817323:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/context-menu-f976b2c22d28038723b0a174cab5abd8.png"},496822:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/template-editor-dry-run-7ffda3078fa2d6093db436ac365b6396.png"},831283:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/template-editor-load-dir-c0c5fd9d7f3f13b285a3ab1013acc8ef.png"},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var s=n(296540);const i={},a=s.createContext(i);function o(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);