/*! For license information please see eb49cf1e.65e32272.js.LICENSE.txt */
"use strict";(self.webpackChunkbackstage_microsite=self.webpackChunkbackstage_microsite||[]).push([[441786],{840779:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>o,frontMatter:()=>i,metadata:()=>c,toc:()=>a});var s=t(474848),r=t(28453);const i={id:"scheduler",title:"Scheduler Service",sidebar_label:"Scheduler",description:"Documentation for the Scheduler service"},d=void 0,c={id:"backend-system/core-services/scheduler",title:"Scheduler Service",description:"Documentation for the Scheduler service",source:"@site/versioned_docs/version-stable/backend-system/core-services/scheduler.md",sourceDirName:"backend-system/core-services",slug:"/backend-system/core-services/scheduler",permalink:"/docs/backend-system/core-services/scheduler",draft:!1,unlisted:!1,editUrl:"https://github.com/backstage/backstage/edit/master/docs/backend-system/core-services/scheduler.md",tags:[],version:"stable",frontMatter:{id:"scheduler",title:"Scheduler Service",sidebar_label:"Scheduler",description:"Documentation for the Scheduler service"},sidebar:"docs",previous:{title:"Root Logger",permalink:"/docs/backend-system/core-services/root-logger"},next:{title:"Token Manager",permalink:"/docs/backend-system/core-services/token-manager"}},l={},a=[{value:"Using the service",id:"using-the-service",level:2},{value:"REST API",id:"rest-api",level:2},{value:"<code>GET &lt;pluginBaseURL&gt;/.backstage/scheduler/v1/tasks</code>",id:"get-pluginbaseurlbackstageschedulerv1tasks",level:3},{value:"<code>POST &lt;pluginBaseURL&gt;/.backstage/scheduler/v1/tasks/&lt;taskId&gt;/trigger</code>",id:"post-pluginbaseurlbackstageschedulerv1taskstaskidtrigger",level:3},{value:"Testing",id:"testing",level:2}];function h(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"When writing plugins, you sometimes want to have things running on a schedule, or something similar to cron jobs that are distributed through instances that your backend plugin is running on. We supply a task scheduler for this purpose that is scoped per plugin so that you can create these tasks and orchestrate their execution."}),"\n",(0,s.jsx)(n.h2,{id:"using-the-service",children:"Using the service"}),"\n",(0,s.jsxs)(n.p,{children:["The following example shows how to get the scheduler service in your ",(0,s.jsx)(n.code,{children:"example"})," backend to issue a scheduled task that runs across your instances at a given interval."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import {\n  coreServices,\n  createBackendPlugin,\n} from '@backstage/backend-plugin-api';\n\ncreateBackendPlugin({\n  pluginId: 'example',\n  register(env) {\n    env.registerInit({\n      deps: {\n        scheduler: coreServices.scheduler,\n      },\n      async init({ scheduler }) {\n        await scheduler.scheduleTask({\n          frequency: { minutes: 10 },\n          timeout: { seconds: 30 },\n          id: 'ping-google',\n          fn: async () => {\n            await fetch('http://google.com/ping');\n          },\n        });\n      },\n    });\n  },\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"rest-api",children:"REST API"}),"\n",(0,s.jsx)(n.p,{children:"The scheduler exposes a REST API on top of each plugin's base URL, that lets you inspect and affect the current state of all of that plugin's tasks."}),"\n",(0,s.jsx)(n.h3,{id:"get-pluginbaseurlbackstageschedulerv1tasks",children:(0,s.jsx)(n.code,{children:"GET <pluginBaseURL>/.backstage/scheduler/v1/tasks"})}),"\n",(0,s.jsx)(n.p,{children:"Lists all tasks that the given plugin registered at startup, and their current states. The response shape is as follows:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "tasks": [\n    {\n      "taskId": "InternalOpenApiDocumentationProvider:refresh",\n      "pluginId": "catalog",\n      "scope": "global",\n      "settings": {\n        "version": 2,\n        "cadence": "PT10S",\n        "initialDelayDuration": "PT10S",\n        "timeoutAfterDuration": "PT1M"\n      },\n      "taskState": {\n        "status": "idle",\n        "startsAt": "2025-04-11T20:35:13.418+02:00",\n        "lastRunEndedAt": "2025-04-11T20:35:03.453+02:00"\n      },\n      "workerState": {\n        "status": "initial-wait"\n      }\n    }\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Each task has the following properties:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Field"}),(0,s.jsx)(n.th,{children:"Format"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"taskId"})}),(0,s.jsx)(n.td,{children:"string"}),(0,s.jsx)(n.td,{children:"A unique (per plugin) ID for the task"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"pluginId"})}),(0,s.jsx)(n.td,{children:"string"}),(0,s.jsx)(n.td,{children:"The plugin where the task is scheduled"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"scope"})}),(0,s.jsx)(n.td,{children:"string"}),(0,s.jsxs)(n.td,{children:["Either ",(0,s.jsx)(n.code,{children:"local"})," (runs on each worker node with potential overlaps, similar to ",(0,s.jsx)(n.code,{children:"setInterval"}),"), or ",(0,s.jsx)(n.code,{children:"global"})," (runs on one worker node at a time, without overlaps)"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"settings"})}),(0,s.jsx)(n.td,{children:"object"}),(0,s.jsxs)(n.td,{children:["Serialized form of the initial settings passed in when scheduling the task. The only completely fixed well known field is ",(0,s.jsx)(n.code,{children:"version"}),"; the others depend on what version is used"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"settings.version"})}),(0,s.jsx)(n.td,{children:"string"}),(0,s.jsx)(n.td,{children:"Internal identifier of the format of the settings object. The format of this object can change completely for each version. This document describes version 2 specifically"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"settings.cadence"})}),(0,s.jsx)(n.td,{children:"string; ISO duration"}),(0,s.jsxs)(n.td,{children:["How often the task runs. Either the string ",(0,s.jsx)(n.code,{children:"manual"})," (only runs when manually triggered), or an ISO duration string starting with the letter P, or a ",(0,s.jsx)(n.code,{children:"cron"})," format string"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"settings.initialDelayDuration"})}),(0,s.jsx)(n.td,{children:"string; ISO duration"}),(0,s.jsx)(n.td,{children:"How long workers wait at service startup before starting to look for work, to give the service some time to stabilize, as an ISO duration string (if configured)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"settings.timeoutAfterDuration"})}),(0,s.jsx)(n.td,{children:"string; ISO duration"}),(0,s.jsx)(n.td,{children:"How long after a task starts that it's considered timed out and available for retries"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"taskState"})}),(0,s.jsx)(n.td,{children:"object"}),(0,s.jsx)(n.td,{children:"The current state of the task (see below for details)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"workerState"})}),(0,s.jsx)(n.td,{children:"object"}),(0,s.jsx)(n.td,{children:"The status of the worker responsible for task"})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"taskState"})," shape depends on whether the task is currently running or not. When running:"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Field"}),(0,s.jsx)(n.th,{children:"Format"}),(0,s.jsx)(n.th,{children:"Optional"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"taskState.status"})}),(0,s.jsx)(n.td,{children:"string"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"running"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"taskState.startedAt"})}),(0,s.jsx)(n.td,{children:"string; ISO timestamp"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"When the current task run started"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"taskState.timesOutAt"})}),(0,s.jsx)(n.td,{children:"string; ISO timestamp"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"When the current task run will time out if it does not finish before that"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"taskState.lastRunError"})}),(0,s.jsx)(n.td,{children:"string; JSON serialized error"}),(0,s.jsx)(n.td,{children:"optional"}),(0,s.jsx)(n.td,{children:"When the task last ran, if it threw an error, this field contains it"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"taskState.lastRunEndedAt"})}),(0,s.jsx)(n.td,{children:"string; ISO timestamp"}),(0,s.jsx)(n.td,{children:"optional"}),(0,s.jsx)(n.td,{children:"When the task last ran, it ended at this time"})]})]})]}),"\n",(0,s.jsx)(n.p,{children:"When the task is idle:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Field"}),(0,s.jsx)(n.th,{children:"Format"}),(0,s.jsx)(n.th,{children:"Optional"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"taskState.status"})}),(0,s.jsx)(n.td,{children:"string"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"idle"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"taskState.startsAt"})}),(0,s.jsx)(n.td,{children:"string; ISO timestamp"}),(0,s.jsx)(n.td,{children:"optional"}),(0,s.jsx)(n.td,{children:"When the task is scheduled to run next; will not be set if the task uses manual scheduling"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"taskState.lastRunError"})}),(0,s.jsx)(n.td,{children:"string; JSON serialized error"}),(0,s.jsx)(n.td,{children:"optional"}),(0,s.jsx)(n.td,{children:"When the task last ran, if it threw an error, this field contains it"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"taskState.lastRunEndedAt"})}),(0,s.jsx)(n.td,{children:"string; ISO timestamp"}),(0,s.jsx)(n.td,{children:"optional"}),(0,s.jsx)(n.td,{children:"When the task last ran, it ended at this time"})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"workerState"})," shape is as follows:"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Field"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"workerState.status"})}),(0,s.jsxs)(n.td,{children:["The status of the worker responsible for task; either ",(0,s.jsx)(n.code,{children:"initial-wait"})," (right at service startup), ",(0,s.jsx)(n.code,{children:"running"})," (task is currently running), or ",(0,s.jsx)(n.code,{children:"idle"})," (task is not running at the moment)"]})]})})]}),"\n",(0,s.jsx)(n.h3,{id:"post-pluginbaseurlbackstageschedulerv1taskstaskidtrigger",children:(0,s.jsx)(n.code,{children:"POST <pluginBaseURL>/.backstage/scheduler/v1/tasks/<taskId>/trigger"})}),"\n",(0,s.jsx)(n.p,{children:"Schedules the given task ID for immediate execution, instead of waiting for its\nnext scheduled time slot to arrive."}),"\n",(0,s.jsx)(n.p,{children:"Note that there can still be an additional small delay before a worker discovers\nthat the task is due and actually picks it up. This typically takes less than a\nsecond, but it can vary."}),"\n",(0,s.jsx)(n.p,{children:"The request has no body."}),"\n",(0,s.jsx)(n.p,{children:"Responds with"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"200 OK"})," if successful"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"404 Not Found"})," if there was no such registered task for this plugin"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"409 Conflict"})," if the task was already in a running state"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"@backstage/backend-test-utils"})," package provides ",(0,s.jsx)(n.code,{children:"mockServices.scheduler"}),", which provides a mocked implementation of the scheduler service that can be used in tests. This mocked implementation is used by default in ",(0,s.jsx)(n.code,{children:"startTestBackend"}),", and it will immediately run any registered tasks on startup as long as they're not configured to run manually or with an initial delay."]}),"\n",(0,s.jsx)(n.p,{children:"A dedicated instance can be used for more control during testing:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"it('should trigger a task', async () => {\n  const scheduler = mockServices.scheduler();\n\n  const { server } = await startTestBackend({\n    features: [scheduler.factory()],\n  });\n\n  await scheduler.triggerTask('some-task-id');\n\n  // Next verify that the plugin state is updated accordingly\n  // e.g. by calling the API or verifying database state\n});\n"})})]})}function o(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},221020:(e,n,t)=>{var s=t(296540),r=Symbol.for("react.element"),i=Symbol.for("react.fragment"),d=Object.prototype.hasOwnProperty,c=s.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function a(e,n,t){var s,i={},a=null,h=null;for(s in void 0!==t&&(a=""+t),void 0!==n.key&&(a=""+n.key),void 0!==n.ref&&(h=n.ref),n)d.call(n,s)&&!l.hasOwnProperty(s)&&(i[s]=n[s]);if(e&&e.defaultProps)for(s in n=e.defaultProps)void 0===i[s]&&(i[s]=n[s]);return{$$typeof:r,type:e,key:a,ref:h,props:i,_owner:c.current}}n.Fragment=i,n.jsx=a,n.jsxs=a},474848:(e,n,t)=>{e.exports=t(221020)},28453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>c});var s=t(296540);const r={},i=s.createContext(r);function d(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);