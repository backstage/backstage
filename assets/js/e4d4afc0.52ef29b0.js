/*! For license information please see e4d4afc0.52ef29b0.js.LICENSE.txt */
"use strict";(self.webpackChunkbackstage_microsite=self.webpackChunkbackstage_microsite||[]).push([[889144],{48636:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var t=i(474848),a=i(28453);const s={id:"usage",title:"Usage",description:"How to use the notifications and signals"},o=void 0,c={id:"notifications/usage",title:"Usage",description:"How to use the notifications and signals",source:"@site/versioned_docs/version-stable/notifications/usage.md",sourceDirName:"notifications",slug:"/notifications/usage",permalink:"/docs/notifications/usage",draft:!1,unlisted:!1,editUrl:"https://github.com/backstage/backstage/edit/master/docs/notifications/usage.md",tags:[],version:"stable",frontMatter:{id:"usage",title:"Usage",description:"How to use the notifications and signals"},sidebar:"docs",previous:{title:"Processors",permalink:"/docs/notifications/processors"},next:{title:"Overview",permalink:"/docs/permissions/overview"}},r={},d=[{value:"Notifications Backend",id:"notifications-backend",level:2},{value:"Notifications Frontend",id:"notifications-frontend",level:2},{value:"Usage",id:"usage",level:2},{value:"Backend",id:"backend",level:2},{value:"External Services",id:"external-services",level:3},{value:"Scaffolder Templates",id:"scaffolder-templates",level:3},{value:"Signals",id:"signals",level:2},{value:"Using signals in your own plugin",id:"using-signals-in-your-own-plugin",level:4},{value:"Consuming Notifications",id:"consuming-notifications",level:2},{value:"Metadata Field",id:"metadata-field",level:2},{value:"Well-known Notification Metadata Fields",id:"well-known-notification-metadata-fields",level:3},{value:"backstage.io/body.markdown",id:"backstageiobodymarkdown",level:4},{value:"Usage",id:"usage-1",level:3}];function l(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"notifications-backend",children:"Notifications Backend"}),"\n",(0,t.jsx)(n.p,{children:"The notifications backend plugin provides an API to create notifications, list notifications per logged-in user, and search based on parameters."}),"\n",(0,t.jsxs)(n.p,{children:["The plugin uses a relational ",(0,t.jsx)(n.a,{href:"https://backstage.io/docs/getting-started/config/database",children:"database"})," for persistence; no specifics are introduced in this context."]}),"\n",(0,t.jsxs)(n.p,{children:["No additional configuration in the app-config is needed, except for optional additional modules for ",(0,t.jsx)(n.code,{children:"processors"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"notifications-frontend",children:"Notifications Frontend"}),"\n",(0,t.jsx)(n.p,{children:"The recipients of notifications have to be entities in the catalog, e.g., of the User or Group kind."}),"\n",(0,t.jsx)(n.p,{children:"Otherwise, no specific configuration is needed for the front-end notifications plugin."}),"\n",(0,t.jsxs)(n.p,{children:["All parametrization is done through component properties, such as the ",(0,t.jsx)(n.code,{children:"NotificationsSidebarItem"}),", which can be used as an active left-side menu item in the front-end."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Notifications Page",src:i(639947).A+"",width:"1918",height:"958"})}),"\n",(0,t.jsxs)(n.p,{children:["In the ",(0,t.jsx)(n.code,{children:"packages/app/src/components/Root/Root.tsx"}),", tweak the ",(0,t.jsx)(n.a,{href:"https://backstage.io/docs/reference/plugin-notifications.notificationssidebaritem",children:"properties"})," of the ",(0,t.jsx)(n.code,{children:"<NotificationsSidebarItem />"})," per specific needs."]}),"\n",(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(n.p,{children:"New notifications can be sent either by a backend plugin or by an external service through the REST API."}),"\n",(0,t.jsx)(n.h2,{id:"backend",children:"Backend"}),"\n",(0,t.jsxs)(n.p,{children:["Regardless of technical feasibility, a backend plugin should avoid directly accessing the notifications REST API.\nInstead, it should integrate with the ",(0,t.jsx)(n.code,{children:"@backstage/plugin-notifications-node"})," to ",(0,t.jsx)(n.code,{children:"send"})," (create) a new notification."]}),"\n",(0,t.jsx)(n.p,{children:"The reasons for this approach include the propagation of authorization in the API request and improved maintenance and backward compatibility in the future."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { notificationService } from '@backstage/plugin-notifications-node';\n\nexport const myPlugin = createBackendPlugin({\n  pluginId: 'myPlugin',\n  register(env) {\n    env.registerInit({\n      deps: {\n        // ...\n        notificationService: notificationService,\n      },\n      async init({\n        // ...\n        notificationService,\n      }) {\n        httpRouter.use(\n          await createRouter({\n            // ...\n            notificationService,\n          }),\n        );\n      },\n    });\n  },\n});\n"})}),"\n",(0,t.jsx)(n.p,{children:"To emit a new notification:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"await notificationService.send({\n  recipients /* of the broadcast or entity type */,\n  payload /* actual message */,\n});\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Consult the ",(0,t.jsx)(n.a,{href:"https://github.com/backstage/backstage/blob/master/plugins/notifications-node/report.api.md",children:"API documentation"})," for further details."]}),"\n",(0,t.jsx)(n.h3,{id:"external-services",children:"External Services"}),"\n",(0,t.jsxs)(n.p,{children:["When the emitter of a notification is a Backstage backend plugin, it is mandatory to use the integration via ",(0,t.jsx)(n.code,{children:"@backstage/plugin-notifications-node"})," as described above."]}),"\n",(0,t.jsxs)(n.p,{children:["If the emitter is a service external to Backstage, an HTTP POST request can be issued directly to the API, assuming that authentication is properly configured.\nRefer to the ",(0,t.jsx)(n.a,{href:"https://backstage.io/docs/auth/service-to-service-auth",children:"service-to-service auth documentation"})," for more details, focusing on the Static Tokens section for the simplest setup option."]}),"\n",(0,t.jsx)(n.p,{children:"An example request for creating a broadcast notification might look like:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'curl -X POST https://[BACKSTAGE_BACKEND]/api/notifications -H "Content-Type: application/json" -H "Authorization: Bearer YOUR_BASE64_SHARED_KEY_TOKEN" -d \'{"recipients":{"type":"broadcast"},"payload": {"title": "Title of broadcast message","link": "http://foo.com/bar","severity": "high","topic": "The topic"}}\'\n'})}),"\n",(0,t.jsx)(n.h3,{id:"scaffolder-templates",children:"Scaffolder Templates"}),"\n",(0,t.jsxs)(n.p,{children:["You can use the ",(0,t.jsx)(n.code,{children:"@backstage/plugin-scaffolder-backend-module-notifications"})," to send notifications when scaffolder templates are run. To install the module, add it to your backend plugin:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"yarn workspace backend add @backstage/plugin-scaffolder-backend-module-notifications\n"})}),"\n",(0,t.jsx)(n.p,{children:"Then, add the module to your backend:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const backend = createBackend();\n// ...\nbackend.add(\n  import('@backstage/plugin-scaffolder-backend-module-notifications'),\n);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In your template you can now use ",(0,t.jsx)(n.code,{children:"notification:send"})," action as part of the steps:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"steps:\n  - id: notify\n    name: Notify\n    action: notification:send\n    input:\n      recipients: entity\n      entityRefs:\n        - component:default/backstage\n      title: 'Template executed'\n      info: 'Your template has been executed'\n      severity: 'info'\n      link: https://backstage.io\n"})}),"\n",(0,t.jsx)(n.h2,{id:"signals",children:"Signals"}),"\n",(0,t.jsx)(n.p,{children:"The use of signals with notifications is optional but generally enhances user experience and performance."}),"\n",(0,t.jsx)(n.p,{children:"When a notification is created, a new signal is emitted to a general-purpose message bus to announce it to subscribed listeners."}),"\n",(0,t.jsx)(n.p,{children:"The frontend maintains a persistent connection (WebSocket) to receive these announcements from the notifications channel.\nThe specific details of the updated or created notification should be retrieved via a request to the notifications API, except for new notifications, where the payload is included in the signal for performance reasons."}),"\n",(0,t.jsx)(n.p,{children:"In a frontend plugin, to subscribe to notifications' signals:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { useSignal } from '@backstage/plugin-signals-react';\n\nconst { lastSignal } = useSignal<NotificationSignal>('notifications');\n\nReact.useEffect(() => {\n  /* ... */\n}, [lastSignal, notificationsApi]);\n"})}),"\n",(0,t.jsx)(n.h4,{id:"using-signals-in-your-own-plugin",children:"Using signals in your own plugin"}),"\n",(0,t.jsx)(n.p,{children:"It's possible to use signals in your own plugin to deliver data from the backend to the frontend in near real-time."}),"\n",(0,t.jsxs)(n.p,{children:["To use signals in your own frontend plugin, you need to add the ",(0,t.jsx)(n.code,{children:"useSignal"})," hook from ",(0,t.jsx)(n.code,{children:"@backstage/plugin-signals-react"})," from ",(0,t.jsx)(n.code,{children:"@backstage/plugin-notifications-common"})," with optional generic type of the signal."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// To use the same type of signal in the backend, this should be placed in a shared common package\nexport type MySignalType = {\n  user: string;\n  data: string;\n  // ....\n};\n\nconst { lastSignal } = useSignal<MySignalType>('my-plugin');\n\nuseEffect(() => {\n  if (lastSignal) {\n    // Do something with the signal\n  }\n}, [lastSignal]);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["To send signals from the backend plugin, you must add the ",(0,t.jsx)(n.code,{children:"signalsServiceRef"})," to your plugin or module as a dependency."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { signalsServiceRef } from '@backstage/plugin-signals-node';\nexport const myPlugin = createBackendPlugin({\n  pluginId: 'my',\n  register(env) {\n    env.registerInit({\n      deps: {\n        httpRouter: coreServices.httpRouter,\n        signals: signalsServiceRef,\n      },\n      async init({ httpRouter, signals }) {\n        httpRouter.use(\n          await createRouter({\n            signals,\n          }),\n        );\n      },\n    });\n  },\n});\n"})}),"\n",(0,t.jsxs)(n.p,{children:["To send the signal using the service, you can use the ",(0,t.jsx)(n.code,{children:"publish"})," method."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"signals.publish<MySignalType>({ user: 'user', data: 'test' });\n"})}),"\n",(0,t.jsx)(n.h2,{id:"consuming-notifications",children:"Consuming Notifications"}),"\n",(0,t.jsx)(n.p,{children:"In a front-end plugin, the simplest way to query a notification is by its ID:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { useApi } from '@backstage/core-plugin-api';\nimport { notificationsApiRef } from '@backstage/plugin-notifications';\n\nconst notificationsApi = useApi(notificationsApiRef);\n\nnotificationsApi.getNotification(yourId);\n\n// or with connection to signals:\nnotificationsApi.getNotification(lastSignal.notification_id);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"metadata-field",children:"Metadata Field"}),"\n",(0,t.jsx)(n.p,{children:"The metadata field is a freeform object that is designed to be used by processors."}),"\n",(0,t.jsx)(n.h3,{id:"well-known-notification-metadata-fields",children:"Well-known Notification Metadata Fields"}),"\n",(0,t.jsx)(n.p,{children:"Below are metadata fields that will be commonly used between processors and have defined schematics."}),"\n",(0,t.jsx)(n.h4,{id:"backstageiobodymarkdown",children:"backstage.io/body.markdown"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"# Example:\nconst payload = {\n  title: 'Entities Require Attention',\n  description: 'Entities: Service A, Service B'\n  metadata: {\n     'backstage.io/body.markdown': `\n        # Entities\n        - Service A\n        - System B\n     `\n  }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"This value of this metadata field should be the notification message in markdown format. This allows additional formatting options for processors that support markdown."}),"\n",(0,t.jsx)(n.h3,{id:"usage-1",children:"Usage"}),"\n",(0,t.jsxs)(n.p,{children:["Below is an example of using the ",(0,t.jsx)(n.code,{children:"backstage.io/body.markdown"})," metadata field in a custom processor."]}),"\n",(0,t.jsx)(n.p,{children:"When sending a notification:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"notificationService.send({\n  recipients: { type: 'entity', entityRef: 'group/default:team-a' },\n  payload: {\n    title: 'Notification',\n    description: 'Description'\n    metadata: {\n      'backstage.io/body.markdown': `\n        ### Notification\n        Description\n      `,\n    },\n  },\n});\n"})}),"\n",(0,t.jsx)(n.p,{children:"In the processor, you can then use the metadata field accordingly:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"async postProcess(notification: Notification): Promise<void> {\n  // We suggest you parse the metadata field with a schema, i.e. Zod\n  const parseResult = CustomProcessorMetadataSchema.safeParse(notification.payload.metadata ?? {});\n  const metadata = parseResult.success ? parseResult.data : {};\n\n  customNotificationSender.send({\n    to: getUsers(notification.recipients),\n    subject: notification.payload.title,\n    markdownText: metadata['backstage.io/body.markdown'] ?? notification.payload.description,\n  });\n}\n"})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},221020:(e,n,i)=>{var t=i(296540),a=Symbol.for("react.element"),s=Symbol.for("react.fragment"),o=Object.prototype.hasOwnProperty,c=t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,r={key:!0,ref:!0,__self:!0,__source:!0};function d(e,n,i){var t,s={},d=null,l=null;for(t in void 0!==i&&(d=""+i),void 0!==n.key&&(d=""+n.key),void 0!==n.ref&&(l=n.ref),n)o.call(n,t)&&!r.hasOwnProperty(t)&&(s[t]=n[t]);if(e&&e.defaultProps)for(t in n=e.defaultProps)void 0===s[t]&&(s[t]=n[t]);return{$$typeof:a,type:e,key:d,ref:l,props:s,_owner:c.current}}n.Fragment=s,n.jsx=d,n.jsxs=d},474848:(e,n,i)=>{e.exports=i(221020)},639947:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/notificationsPage-3c61ae732e837faf0b86725f780907d0.png"},28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>c});var t=i(296540);const a={},s=t.createContext(a);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);