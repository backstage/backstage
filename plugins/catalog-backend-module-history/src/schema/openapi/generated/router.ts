/*
 * Copyright 2025 The Backstage Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// ******************************************************************
// * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. *
// ******************************************************************
import { createValidatedOpenApiRouterFromGeneratedEndpointMap } from '@backstage/backend-openapi-utils';
import { EndpointMap } from './';

export const spec = {
  openapi: '3.0.3',
  info: {
    title: 'events',
    version: '1',
    description: 'The history module for the Backstage catalog backend plugin.',
    license: {
      name: 'Apache-2.0',
      url: 'http://www.apache.org/licenses/LICENSE-2.0.html',
    },
    contact: {},
  },
  servers: [
    {
      url: '/',
    },
  ],
  components: {
    examples: {},
    headers: {},
    parameters: {
      afterEventId: {
        name: 'afterEventId',
        in: 'query',
        description:
          'Return events that are after (newer if ordered ascending or older if ordered decending) but not equal to the given event ID. Use the special value "last" to start reading from the very end of the events list. This is typically only usable in "asc" order and with "block" set to true.\n',
        required: false,
        schema: {
          type: 'string',
          minLength: 1,
        },
      },
      entityRef: {
        name: 'entityRef',
        in: 'query',
        description: 'Limit results to the given entity ref.',
        required: false,
        allowReserved: true,
        schema: {
          type: 'string',
          minLength: 1,
        },
      },
      entityId: {
        name: 'entityId',
        in: 'query',
        description: 'Limit results to the given entity uid.',
        required: false,
        allowReserved: true,
        schema: {
          type: 'string',
          minLength: 1,
        },
      },
      cursor: {
        name: 'cursor',
        in: 'query',
        description:
          'Request items following the given previously returned cursor.',
        required: false,
        allowReserved: true,
        schema: {
          type: 'string',
          minLength: 1,
        },
      },
      limit: {
        name: 'limit',
        in: 'query',
        description: 'Maximum number of records to return in the response.',
        required: false,
        schema: {
          type: 'integer',
          minimum: 1,
        },
      },
      order: {
        name: 'order',
        in: 'query',
        description:
          'Return entries in ascending (older to newer events) or descending (newer to older events) order\n',
        required: false,
        schema: {
          type: 'string',
          enum: ['asc', 'desc'],
        },
      },
      block: {
        name: 'block',
        in: 'query',
        description:
          'If no events yet match, return a 202 response and block the query until the client should try again. This parameter only applies when the query order is ascending, and trying to use it in descending order queries will lead to a 400 response error.\n',
        required: false,
        schema: {
          type: 'boolean',
        },
      },
    },
    responses: {
      ErrorResponse: {
        description: 'An error response from the backend.',
        content: {
          'application/json': {
            schema: {
              type: 'object',
              required: ['error', 'request', 'response'],
              additionalProperties: false,
              properties: {
                error: {
                  type: 'object',
                  required: ['name', 'message'],
                  properties: {
                    name: {
                      type: 'string',
                    },
                    message: {
                      type: 'string',
                    },
                  },
                },
                request: {
                  type: 'object',
                  required: ['method', 'url'],
                  properties: {
                    method: {
                      type: 'string',
                    },
                    url: {
                      type: 'string',
                    },
                  },
                },
                response: {
                  type: 'object',
                  required: ['statusCode'],
                  properties: {
                    statusCode: {
                      type: 'number',
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    schemas: {
      Event: {
        description: 'A single catalog event.',
        type: 'object',
        required: ['eventId', 'eventAt', 'eventType'],
        properties: {
          eventId: {
            type: 'string',
            description:
              'A unique sequential big-integer ID for the event, as a string.',
          },
          eventAt: {
            type: 'string',
            description: 'An ISO timestamp string for when the event happened',
          },
          eventType: {
            type: 'string',
            description: 'The distinct type of event',
          },
          entityRef: {
            type: 'string',
            description:
              'The entity ref related to the event, where applicable',
          },
          entityJson: {
            type: 'string',
            description:
              'The JSON serialized body of the entity related to the event, where applicable',
          },
        },
      },
      SubscriptionSpec: {
        description:
          'The specification for a single subscription, used in an upsert',
        type: 'object',
        properties: {
          subscriptionId: {
            type: 'string',
            description:
              'A unique identifier of this subscription.\nIt is recommended that this ID only consist of URL safe characters, and it must be no more than 250 characters long.\nIf not specified, a new subscription with a random ID will be created.\n',
          },
          from: {
            type: 'string',
            description:
              'Where the subscription should start from. Reading always happen in ascending order (from older to newer events).\nEither an event ID to start from (not including itself), or the special strings "beginning" or "now" for those respective ends of the event stream.\nIf not specified, "now" is assumed.\nThis parameter only has an effect on the actual current stream position upon initial creation; after that, only reads can move it.\n',
          },
          entityRef: {
            type: 'string',
            description: 'Filter to only events pertaining to this entity ref',
          },
          entityId: {
            type: 'string',
            description: 'Filter to only events pertaining to this entity uid',
          },
        },
      },
      Subscription: {
        description: 'A single subscription',
        type: 'object',
        required: ['subscriptionId'],
        properties: {
          subscriptionId: {
            type: 'string',
            description: 'The unique identifier of this subscription.',
          },
          entityRef: {
            type: 'string',
            description:
              'Filtered to only events pertaining to this entity ref',
          },
          entityId: {
            type: 'string',
            description:
              'Filtered to only events pertaining to this entity uid',
          },
        },
      },
    },
    securitySchemes: {
      BackstageAuth: {
        type: 'http',
        scheme: 'bearer',
      },
    },
  },
  paths: {
    '/history/v1/events': {
      get: {
        operationId: 'GetEvents',
        description: 'Stateless, cursor based reading of history events',
        security: [
          {},
          {
            BackstageAuth: [],
          },
        ],
        parameters: [
          {
            $ref: '#/components/parameters/cursor',
          },
          {
            $ref: '#/components/parameters/afterEventId',
          },
          {
            $ref: '#/components/parameters/entityRef',
          },
          {
            $ref: '#/components/parameters/entityId',
          },
          {
            $ref: '#/components/parameters/order',
          },
          {
            $ref: '#/components/parameters/limit',
          },
          {
            $ref: '#/components/parameters/block',
          },
        ],
        responses: {
          '200': {
            description: 'Returned a set of events',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  required: ['items', 'pageInfo'],
                  additionalProperties: false,
                  properties: {
                    items: {
                      type: 'array',
                      description:
                        'The list of events. The number of returned items may be fewer than requested.',
                      items: {
                        $ref: '#/components/schemas/Event',
                      },
                    },
                    pageInfo: {
                      type: 'object',
                      description:
                        'Pagination information. If the "cursor" property is set, it can be used for requesting subsequent pages of data.',
                      properties: {
                        cursor: {
                          type: 'string',
                          description:
                            'The cursor for the next set of results.',
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          '202': {
            description:
              'No new events are available. Response will block until the client should try again.',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  required: ['items', 'pageInfo'],
                  additionalProperties: false,
                  properties: {
                    items: {
                      type: 'array',
                      description:
                        'The list of events. The number of returned items may be fewer than requested.',
                      items: {
                        $ref: '#/components/schemas/Event',
                      },
                    },
                    pageInfo: {
                      type: 'object',
                      description:
                        'Pagination information. If the "cursor" property is set, it can be used for requesting subsequent pages of data.',
                      properties: {
                        cursor: {
                          type: 'string',
                          description:
                            'The cursor for the next set of results.',
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          default: {
            $ref: '#/components/responses/ErrorResponse',
          },
        },
      },
    },
    '/history/v1/subscriptions': {
      post: {
        operationId: 'UpsertSubscription',
        description: 'Creates or updates a subscription',
        security: [
          {},
          {
            BackstageAuth: [],
          },
        ],
        requestBody: {
          required: false,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/SubscriptionSpec',
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'Created or updated the subscription',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  required: ['subscription'],
                  additionalProperties: false,
                  properties: {
                    subscription: {
                      $ref: '#/components/schemas/Subscription',
                    },
                  },
                },
              },
            },
          },
          default: {
            $ref: '#/components/responses/ErrorResponse',
          },
        },
      },
    },
    '/history/v1/subscriptions/{subscriptionId}/read': {
      get: {
        operationId: 'ReadSubscription',
        description: 'Reads events from a subscription',
        security: [
          {},
          {
            BackstageAuth: [],
          },
        ],
        parameters: [
          {
            in: 'path',
            name: 'subscriptionId',
            required: true,
            allowReserved: true,
            schema: {
              type: 'string',
            },
          },
          {
            $ref: '#/components/parameters/limit',
          },
          {
            $ref: '#/components/parameters/block',
          },
        ],
        responses: {
          '200': {
            description: 'Read events from the subscription',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  required: ['items'],
                  additionalProperties: false,
                  properties: {
                    items: {
                      type: 'array',
                      description: 'The list of events.',
                      items: {
                        $ref: '#/components/schemas/Event',
                      },
                    },
                    ackId: {
                      type: 'string',
                      description:
                        'The ID used to acknowledge this batch of events. Is only set if there were any events to send.',
                    },
                  },
                },
              },
            },
          },
          '202': {
            description:
              'No new events are available. Response will block until the client should try again.',
          },
          '404': {
            $ref: '#/components/responses/ErrorResponse',
          },
          default: {
            $ref: '#/components/responses/ErrorResponse',
          },
        },
      },
    },
    '/history/v1/subscriptions/{subscriptionId}/ack/{ackId}': {
      post: {
        operationId: 'AckSubscription',
        description:
          'Acknowledges a received batch of events from a subscription',
        security: [
          {},
          {
            BackstageAuth: [],
          },
        ],
        parameters: [
          {
            in: 'path',
            name: 'subscriptionId',
            required: true,
            allowReserved: true,
            schema: {
              type: 'string',
            },
          },
          {
            in: 'path',
            name: 'ackId',
            required: true,
            allowReserved: true,
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'The ack was received',
          },
          '404': {
            $ref: '#/components/responses/ErrorResponse',
          },
          default: {
            $ref: '#/components/responses/ErrorResponse',
          },
        },
      },
    },
  },
} as const;
export const createOpenApiRouter = async (
  options?: Parameters<
    typeof createValidatedOpenApiRouterFromGeneratedEndpointMap
  >['1'],
) =>
  createValidatedOpenApiRouterFromGeneratedEndpointMap<EndpointMap>(
    spec,
    options,
  );
