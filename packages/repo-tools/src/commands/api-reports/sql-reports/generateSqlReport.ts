/*
 * Copyright 2024 The Backstage Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { SchemaInfo } from './types';

function sortedEntries<T>(obj: Record<string, T>): [string, T][] {
  return Object.entries(obj).sort(([a], [b]) => a.localeCompare(b));
}

function code(str: unknown): string {
  if (str === '-') {
    return str;
  }
  return `\`${str}\``;
}

export function generateSqlReport(options: {
  reportName: string;
  failedDownMigration?: string;
  schemaInfo: SchemaInfo;
}): string {
  const { reportName, failedDownMigration, schemaInfo } = options;

  const output = [
    `## SQL Report file for "${reportName}"`,
    '',
    '> Do not edit this file. It is a report generated by `yarn build:api-reports`',
    '',
  ];

  if (failedDownMigration) {
    output.push('> [!WARNING]');
    output.push(`> Failed to migrate down from '${failedDownMigration}'`);
    output.push('');
  }

  if (Object.keys(schemaInfo.sequences).length > 0) {
    output.push('## Sequences');
    output.push('');
    for (const [sequenceName, sequenceInfo] of sortedEntries(
      schemaInfo.sequences,
    )) {
      output.push(`- ${code(sequenceName)} (${sequenceInfo.type})`);
    }
    output.push('');
  }

  for (const [tableName, tableInfo] of sortedEntries(schemaInfo.tables)) {
    output.push(`## Table ${code(tableName)}`);
    output.push('');
    output.push('  | Column | Type | Nullable | Max Length | Default |');
    output.push('  |--------|------|----------|------------|---------|');
    for (const [columnName, columnInfo] of sortedEntries(tableInfo.columns)) {
      output.push(
        `  | ${code(columnName)} | ${code(columnInfo.type)} | ${
          columnInfo.nullable
        } | ${columnInfo.maxLength ?? '-'} | ${code(
          columnInfo.defaultValue ?? '-',
        )} |`,
      );
    }
    output.push('');

    if (Object.keys(tableInfo.indices).length > 0) {
      output.push('### Indices');
      output.push('');
      for (const [indexName, indexInfo] of sortedEntries(tableInfo.indices)) {
        const indexType = [
          indexInfo.unique && 'unique',
          indexInfo.primary && 'primary',
        ]
          .filter(Boolean)
          .join(' ');
        output.push(
          `- ${code(indexName)} (${indexInfo.columns.map(code).join(', ')})${
            indexType ? ` ${indexType}` : ''
          }`,
        );
      }
      output.push('');
    }
  }

  return output.join('\n');
}
