/*
 * Copyright 2020 The Backstage Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Lockfile } from './Lockfile';
import { createMockDirectory } from '@backstage/backend-test-utils';

const LEGACY_HEADER = `# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
# yarn lockfile v1

`;

const MODERN_HEADER = `# This file is generated by running "yarn install" inside your project.
# Manual changes might be lost - proceed with caution!

__metadata:
  version: 6
  cacheKey: 8
`;

const mockA = `${LEGACY_HEADER}
a@^1:
  version "1.0.1"
  resolved "https://my-registry/a-1.0.01.tgz#abc123"
  integrity sha512-xyz
  dependencies:
    b "^2"

b@2.0.x:
  version "2.0.1"

b@^2:
  version "2.0.0"
`;

describe('Lockfile', () => {
  const mockDir = createMockDirectory();

  it('should load and serialize mockA', async () => {
    mockDir.setContent({
      'yarn.lock': mockA,
    });

    const lockfile = await Lockfile.load(mockDir.resolve('yarn.lock'));
    expect(lockfile.get('a')).toEqual([
      { range: '^1', version: '1.0.1', dataKey: 'a@^1' },
    ]);
    expect(lockfile.get('b')).toEqual([
      { range: '2.0.x', version: '2.0.1', dataKey: 'b@2.0.x' },
      { range: '^2', version: '2.0.0', dataKey: 'b@^2' },
    ]);
    expect(lockfile.toString()).toBe(mockA);
  });
});

const mockANew = `${MODERN_HEADER}
a@^1:
  version: 1.0.1
  dependencies:
    b: ^2
  integrity: sha512-xyz
  resolved: "https://my-registry/a-1.0.01.tgz#abc123"

"b@2.0.x, b@^2.0.1":
  version: 2.0.1

b@^2:
  version: 2.0.0
`;

describe('New Lockfile', () => {
  const mockDir = createMockDirectory();

  it('should load and serialize mockANew', async () => {
    mockDir.setContent({
      'yarn.lock': mockANew,
    });

    const lockfile = await Lockfile.load(mockDir.resolve('yarn.lock'));
    expect(lockfile.get('a')).toEqual([
      { range: '^1', version: '1.0.1', dataKey: 'a@^1' },
    ]);
    expect(lockfile.get('b')).toEqual([
      { range: '2.0.x', version: '2.0.1', dataKey: 'b@2.0.x, b@^2.0.1' },
      { range: '^2.0.1', version: '2.0.1', dataKey: 'b@2.0.x, b@^2.0.1' },
      { range: '^2', version: '2.0.0', dataKey: 'b@^2' },
    ]);
    expect(lockfile.toString()).toBe(mockANew);
  });
});
