/*
 * Copyright 2020 The Backstage Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { YarnLockfile } from './YarnLockfile';

const LEGACY_HEADER = `# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
# yarn lockfile v1

`;

const MODERN_HEADER = `# This file is generated by running "yarn install" inside your project.
# Manual changes might be lost - proceed with caution!

__metadata:
  version: 6
  cacheKey: 8
`;

describe('YarnLockfile', () => {
  describe('classic version', () => {
    const mockA = `${LEGACY_HEADER}
a@^1:
  version "1.0.1"
  resolved "https://my-registry/a-1.0.01.tgz#abc123"
  integrity sha512-xyz
  dependencies:
    b "^2"

b@2.0.x:
  version "2.0.1"

b@^2:
  version "2.0.0"
`;

    it('should load and serialize', async () => {
      const lockfile = YarnLockfile.parse(mockA);
      expect(lockfile.get('a')).toEqual([
        { range: '^1', version: '1.0.1', dataKey: 'a@^1' },
      ]);
      expect(lockfile.get('b')).toEqual([
        { range: '2.0.x', version: '2.0.1', dataKey: 'b@2.0.x' },
        { range: '^2', version: '2.0.0', dataKey: 'b@^2' },
      ]);
      expect(lockfile.toString()).toBe(mockA);
    });
  });

  describe('berry version', () => {
    const mockA = `${MODERN_HEADER}
a@^1:
  version: 1.0.1
  dependencies:
    b: ^2
  integrity: sha512-xyz
  resolved: "https://my-registry/a-1.0.01.tgz#abc123"

"b@2.0.x, b@^2.0.1":
  version: 2.0.1

b@^2:
  version: 2.0.0
`;

    it('should load and serialize', async () => {
      const lockfile = YarnLockfile.parse(mockA);
      expect(lockfile.get('a')).toEqual([
        { range: '^1', version: '1.0.1', dataKey: 'a@^1' },
      ]);
      expect(lockfile.get('b')).toEqual([
        { range: '2.0.x', version: '2.0.1', dataKey: 'b@2.0.x, b@^2.0.1' },
        { range: '^2.0.1', version: '2.0.1', dataKey: 'b@2.0.x, b@^2.0.1' },
        { range: '^2', version: '2.0.0', dataKey: 'b@^2' },
      ]);
      expect(lockfile.toString()).toBe(mockA);
    });
  });

  describe('diff', () => {
    const lockfileLegacyA = YarnLockfile.parse(`${LEGACY_HEADER}
a@^1:
  version "1.0.1"
  resolved "https://my-registry/a-1.0.01.tgz#abc123"
  integrity sha512-xyz
  dependencies:
    b "^2"

b@3:
  version "3.0.1"
  integrity sha512-abc1

b@2.0.x:
  version "2.0.1"
  integrity sha512-abc2

b@^2:
  version "2.0.0"
  integrity sha512-abc3

c@^1:
  version "1.0.1"
  integrity x
`);

    const lockfileLegacyB = YarnLockfile.parse(`${LEGACY_HEADER}
a@^1:
  version "1.0.1"
  resolved "https://my-registry/a-1.0.01.tgz#abc123"
  integrity sha512-xyz-other
  dependencies:
    b "^2"

b@2.0.x, b@^2:
  version "2.0.0"
  integrity sha512-abc3

b@4:
  version "4.0.0"
  integrity sha512-abc

d@^1:
  version "1.0.1"
  integrity x
`);

    const lockfileModernA = YarnLockfile.parse(`${MODERN_HEADER}
"a@npm:^1":
  version: "1.0.1"
  resolved: "https://my-registry/a-1.0.01.tgz#abc123"
  checksum: sha512-xyz
  dependencies:
    b: "^2"

"b@npm:3":
  version: "3.0.1"
  checksum: sha512-abc1

"b@npm:2.0.x":
  version: "2.0.1"
  checksum: sha512-abc2

"b@npm:^2":
  version: "2.0.0"
  checksum: sha512-abc3

"c@npm:^1":
  version: "1.0.1"
  checksum: x
`);

    const lockfileModernB = YarnLockfile.parse(`${MODERN_HEADER}
"a@npm:^1":
  version: "1.0.1"
  resolution: "a@npm:1.0.1"
  checksum: sha512-xyz-other
  dependencies:
    b: "^2"

"b@npm:2.0.x, b@npm:^2":
  version: "2.0.0"
  checksum: sha512-abc3

"b@npm:4":
  version: "4.0.0"
  checksum: sha512-abc

"d@npm:^1":
  version: "1.0.1"
  checksum: x
`);

    it('should diff two legacy lockfiles', async () => {
      expect(lockfileLegacyA.diff(lockfileLegacyB)).toEqual({
        added: [
          { name: 'b', range: '3' },
          { name: 'c', range: '^1' },
        ],
        changed: [
          { name: 'a', range: '^1' },
          { name: 'b', range: '2.0.x' },
        ],
        removed: [
          { name: 'b', range: '4' },
          { name: 'd', range: '^1' },
        ],
      });
      expect(lockfileLegacyB.diff(lockfileLegacyA)).toEqual({
        added: [
          { name: 'b', range: '4' },
          { name: 'd', range: '^1' },
        ],
        changed: [
          { name: 'a', range: '^1' },
          { name: 'b', range: '2.0.x' },
        ],
        removed: [
          { name: 'b', range: '3' },
          { name: 'c', range: '^1' },
        ],
      });
    });

    it('should diff two modern lockfiles', async () => {
      expect(lockfileModernA.diff(lockfileModernB)).toEqual({
        added: [
          { name: 'b', range: '3' },
          { name: 'c', range: '^1' },
        ],
        changed: [
          { name: 'a', range: '^1' },
          { name: 'b', range: '2.0.x' },
        ],
        removed: [
          { name: 'b', range: '4' },
          { name: 'd', range: '^1' },
        ],
      });
      expect(lockfileModernB.diff(lockfileModernA)).toEqual({
        added: [
          { name: 'b', range: '4' },
          { name: 'd', range: '^1' },
        ],
        changed: [
          { name: 'a', range: '^1' },
          { name: 'b', range: '2.0.x' },
        ],
        removed: [
          { name: 'b', range: '3' },
          { name: 'c', range: '^1' },
        ],
      });
    });

    it('should diff legacy and modern lockfiles', async () => {
      expect(lockfileLegacyA.diff(lockfileModernB)).toEqual({
        added: [
          { name: 'b', range: '3' },
          { name: 'c', range: '^1' },
        ],
        changed: [
          { name: 'a', range: '^1' },
          { name: 'b', range: '2.0.x' },
        ],
        removed: [
          { name: 'b', range: '4' },
          { name: 'd', range: '^1' },
        ],
      });
      expect(lockfileLegacyB.diff(lockfileModernA)).toEqual({
        added: [
          { name: 'b', range: '4' },
          { name: 'd', range: '^1' },
        ],
        changed: [
          { name: 'a', range: '^1' },
          { name: 'b', range: '2.0.x' },
        ],
        removed: [
          { name: 'b', range: '3' },
          { name: 'c', range: '^1' },
        ],
      });
    });

    it('should diff modern and legacy lockfiles', async () => {
      expect(lockfileModernA.diff(lockfileLegacyB)).toEqual({
        added: [
          { name: 'b', range: '3' },
          { name: 'c', range: '^1' },
        ],
        changed: [
          { name: 'a', range: '^1' },
          { name: 'b', range: '2.0.x' },
        ],
        removed: [
          { name: 'b', range: '4' },
          { name: 'd', range: '^1' },
        ],
      });
      expect(lockfileModernB.diff(lockfileLegacyA)).toEqual({
        added: [
          { name: 'b', range: '4' },
          { name: 'd', range: '^1' },
        ],
        changed: [
          { name: 'a', range: '^1' },
          { name: 'b', range: '2.0.x' },
        ],
        removed: [
          { name: 'b', range: '3' },
          { name: 'c', range: '^1' },
        ],
      });
    });

    it('should handle workspace ranges', async () => {
      const lockfile = `${MODERN_HEADER}
"@backstage/app-defaults@workspace:^, @backstage/app-defaults@workspace:packages/app-defaults":
  version: 0.0.0-use.local
  resolution: "@backstage/app-defaults@workspace:packages/app-defaults"
  dependencies:
    "@backstage/cli": "workspace:^"
    "@backstage/core-app-api": "workspace:^"
    "@backstage/core-components": "workspace:^"
    "@backstage/core-plugin-api": "workspace:^"
    "@backstage/plugin-permission-react": "workspace:^"
    "@backstage/test-utils": "workspace:^"
    "@backstage/theme": "workspace:^"
    "@material-ui/core": ^4.12.2
    "@material-ui/icons": ^4.9.1
    "@testing-library/jest-dom": ^5.10.1
    "@testing-library/react": ^12.1.3
    "@types/node": ^16.11.26
    "@types/react": ^16.13.1 || ^17.0.0
  peerDependencies:
    react: ^16.13.1 || ^17.0.0
    react-dom: ^16.13.1 || ^17.0.0
    react-router-dom: 6.0.0-beta.0 || ^6.3.0
  languageName: unknown
  linkType: soft

"@backstage/backend-app-api@workspace:^, @backstage/backend-app-api@workspace:packages/backend-app-api":
  version: 0.0.0-use.local
  resolution: "@backstage/backend-app-api@workspace:packages/backend-app-api"
  dependencies:
    "@backstage/backend-common": "^0.25.0"
    "@backstage/backend-plugin-api": "workspace:^"
    "@backstage/backend-tasks": "workspace:^"
    "@backstage/cli": "workspace:^"
    "@backstage/errors": "workspace:^"
    "@backstage/plugin-permission-node": "workspace:^"
    express: ^4.17.1
    express-promise-router: ^4.1.0
    winston: ^3.2.1
  languageName: unknown
  linkType: soft
`;
      expect(
        YarnLockfile.parse(lockfile).diff(YarnLockfile.parse(lockfile)),
      ).toEqual({
        added: [],
        changed: [],
        removed: [],
      });
    });
  });

  describe('createSimplifiedDependencyGraph', () => {
    it('for modern lockfile', () => {
      expect(
        YarnLockfile.parse(
          `${MODERN_HEADER}
"@backstage/app-defaults@workspace:^, @backstage/app-defaults@workspace:packages/app-defaults":
  version: 0.0.0-use.local
  resolution: "@backstage/app-defaults@workspace:packages/app-defaults"
  dependencies:
    "@backstage/cli": "workspace:^"
    "@backstage/core-app-api": "workspace:^"
    "@backstage/core-components": "workspace:^"
    "@backstage/core-plugin-api": "workspace:^"
    "@backstage/plugin-permission-react": "workspace:^"
    "@backstage/test-utils": "workspace:^"
    "@backstage/theme": "workspace:^"
    "@material-ui/core": ^4.12.2
    "@material-ui/icons": ^4.9.1
    "@testing-library/jest-dom": ^5.10.1
    "@testing-library/react": ^12.1.3
    "@types/node": ^16.11.26
    "@types/react": ^16.13.1 || ^17.0.0
  peerDependencies:
    react: ^16.13.1 || ^17.0.0
    react-dom: ^16.13.1 || ^17.0.0
    react-router-dom: 6.0.0-beta.0 || ^6.3.0
  languageName: unknown
  linkType: soft

"@backstage/backend-app-api@workspace:^, @backstage/backend-app-api@workspace:packages/backend-app-api":
  version: 0.0.0-use.local
  resolution: "@backstage/backend-app-api@workspace:packages/backend-app-api"
  dependencies:
    "@backstage/backend-common": "^0.25.0"
    "@backstage/backend-plugin-api": "workspace:^"
    "@backstage/backend-tasks": "workspace:^"
    "@backstage/cli": "workspace:^"
    "@backstage/errors": "workspace:^"
    "@backstage/plugin-permission-node": "workspace:^"
    express: ^4.17.1
    express-promise-router: ^4.1.0
    winston: ^3.2.1
  languageName: unknown
  linkType: soft
`,
        ).createSimplifiedDependencyGraph(),
      ).toEqual(
        new Map([
          [
            '@backstage/app-defaults',
            new Set([
              '@backstage/cli',
              '@backstage/core-app-api',
              '@backstage/core-components',
              '@backstage/core-plugin-api',
              '@backstage/plugin-permission-react',
              '@backstage/test-utils',
              '@backstage/theme',
              '@material-ui/core',
              '@material-ui/icons',
              '@testing-library/jest-dom',
              '@testing-library/react',
              '@types/node',
              '@types/react',
              'react',
              'react-dom',
              'react-router-dom',
            ]),
          ],
          [
            '@backstage/backend-app-api',
            new Set([
              '@backstage/backend-common',
              '@backstage/backend-plugin-api',
              '@backstage/backend-tasks',
              '@backstage/cli',
              '@backstage/errors',
              '@backstage/plugin-permission-node',
              'express',
              'express-promise-router',
              'winston',
            ]),
          ],
        ]),
      );
    });

    it('for simple lockfile without dependencies', () => {
      expect(
        YarnLockfile.parse(
          `${MODERN_HEADER}
"a@npm:^1":
  version: "1.0.1"

"b@npm:3":
  version: "3.0.1"

"b@npm:2.0.x":
  version: "2.0.1"
  checksum: sha512-abc2
`,
        ).createSimplifiedDependencyGraph(),
      ).toEqual(
        new Map([
          ['a', new Set()],
          ['b', new Set()],
        ]),
      );
    });

    it('for lockfile with dependencies', () => {
      expect(
        YarnLockfile.parse(
          `${MODERN_HEADER}
"a@npm:^1":
  version: "1.0.1"
  dependencies:
    b: "^2"

"b@npm:3":
  version: "3.0.1"
  checksum: sha512-abc1

"b@npm:2.0.x":
  version: "2.0.1"
  checksum: sha512-abc2
  dependencies:
    c: "^1"

"b@npm:^2":
  version: "2.0.0"
  checksum: sha512-abc3
  peerDependencies:
    d: "^1"

"c@npm:^1":
  version: "1.0.1"

"d@npm:^1":
  version: "1.0.2"
`,
        ).createSimplifiedDependencyGraph(),
      ).toEqual(
        new Map([
          ['a', new Set(['b'])],
          ['b', new Set(['c', 'd'])],
          ['c', new Set()],
          ['d', new Set()],
        ]),
      );
    });

    it('for legacy lockfile', () => {
      expect(
        YarnLockfile.parse(
          `${LEGACY_HEADER}
a@^1:
  version "1.0.1"
  dependencies:
    b "^2"

b@3:
  version "3.0.1"
  integrity sha512-abc1

b@2.0.x:
  version "2.0.1"
  integrity sha512-abc2
  dependencies:
    c "^1"

b@^2:
  version "2.0.0"
  integrity sha512-abc3
  dependencies:
    d "^1"

c@^1:
  version "1.0.1"
  integrity x

d@^1:
  version "1.0.1"
  integrity x
`,
        ).createSimplifiedDependencyGraph(),
      ).toEqual(
        new Map([
          ['a', new Set(['b'])],
          ['b', new Set(['c', 'd'])],
          ['c', new Set()],
          ['d', new Set()],
        ]),
      );
    });
  });

  describe('getDependencyTreeHash', () => {
    const content = `${MODERN_HEADER}
"a@npm:^1":
  version: "1.0.0"
  checksum: sha512-a-1
  dependencies:
    b: "^2"

"b@npm:2.0.x, b@npm:^2":
  version: "2.0.0"
  checksum: sha512-b-1

"b@npm:4":
  version: "3.0.0"
  checksum: sha512-b-2

"c@npm:^1":
  version: "4.0.0"
  checksum: sha512-c-1
`;
    const lockfile = YarnLockfile.parse(content);

    const hashA = lockfile.getDependencyTreeHash('a');
    const hashB = lockfile.getDependencyTreeHash('b');
    const hashC = lockfile.getDependencyTreeHash('c');

    it('should generate stable dependency hashes', () => {
      expect(hashA).toMatchInlineSnapshot(
        `"2d1d4c1c577c291e815e87779c72fc78a78e56cc"`,
      );
      expect(hashB).toMatchInlineSnapshot(
        `"7e46d0c7337540179b442c87a7c5555543798f15"`,
      );
      expect(hashC).toMatchInlineSnapshot(
        `"e65103abd217954bad40e2f834b990a5e6fa4054"`,
      );
    });

    it('should generate different hashes for different versions', () => {
      const lockfileNewA = YarnLockfile.parse(
        content.replace('1.0.0', '1.0.1'),
      );
      expect(lockfileNewA.getDependencyTreeHash('a')).not.toBe(hashA);
      expect(lockfileNewA.getDependencyTreeHash('b')).toBe(hashB);
      expect(lockfileNewA.getDependencyTreeHash('c')).toBe(hashC);

      const lockfileNewB1 = YarnLockfile.parse(
        content.replace('2.0.0', '2.0.1'),
      );
      expect(lockfileNewB1.getDependencyTreeHash('a')).not.toBe(hashA);
      expect(lockfileNewB1.getDependencyTreeHash('b')).not.toBe(hashB);
      expect(lockfileNewB1.getDependencyTreeHash('c')).toBe(hashC);

      const lockfileNewB2 = YarnLockfile.parse(
        content.replace('3.0.0', '3.0.1'),
      );
      expect(lockfileNewB2.getDependencyTreeHash('a')).not.toBe(hashA);
      expect(lockfileNewB2.getDependencyTreeHash('b')).not.toBe(hashB);
      expect(lockfileNewB2.getDependencyTreeHash('c')).toBe(hashC);

      const lockfileNewC = YarnLockfile.parse(
        content.replace('4.0.0', '4.0.1'),
      );
      expect(lockfileNewC.getDependencyTreeHash('a')).toBe(hashA);
      expect(lockfileNewC.getDependencyTreeHash('b')).toBe(hashB);
      expect(lockfileNewC.getDependencyTreeHash('c')).not.toBe(hashC);
    });

    it('should generate different hashes for different checksums', () => {
      const lockfileNewA = YarnLockfile.parse(
        content.replace('sha512-a-1', 'sha512-a-1-new'),
      );
      expect(lockfileNewA.getDependencyTreeHash('a')).not.toBe(hashA);
      expect(lockfileNewA.getDependencyTreeHash('b')).toBe(hashB);
      expect(lockfileNewA.getDependencyTreeHash('c')).toBe(hashC);

      const lockfileNewB1 = YarnLockfile.parse(
        content.replace('sha512-b-1', 'sha512-b-1-new'),
      );
      expect(lockfileNewB1.getDependencyTreeHash('a')).not.toBe(hashA);
      expect(lockfileNewB1.getDependencyTreeHash('b')).not.toBe(hashB);
      expect(lockfileNewB1.getDependencyTreeHash('c')).toBe(hashC);

      const lockfileNewB2 = YarnLockfile.parse(
        content.replace('sha512-b-2', 'sha512-b-2-new'),
      );
      expect(lockfileNewB2.getDependencyTreeHash('a')).not.toBe(hashA);
      expect(lockfileNewB2.getDependencyTreeHash('b')).not.toBe(hashB);
      expect(lockfileNewB2.getDependencyTreeHash('c')).toBe(hashC);

      const lockfileNewC = YarnLockfile.parse(
        content.replace('sha512-c-1', 'sha512-c-1-new'),
      );
      expect(lockfileNewC.getDependencyTreeHash('a')).toBe(hashA);
      expect(lockfileNewC.getDependencyTreeHash('b')).toBe(hashB);
      expect(lockfileNewC.getDependencyTreeHash('c')).not.toBe(hashC);
    });
  });
});
